Shell Scripts are interpreted and not compiled

Search what are the shell types which ur OS supports:
cat /etc/shells


/bin/sh           : Born Shell , original shell still used unix env
/bin/bash         : Born again shell, improved version od born shell, GNU shell , intutive and flexible
/bin/rbash        :  
/bin/dash
/usr/bin/tmux
/usr/bin/screen

which bash > where bash is located 
/bin/bash

-rw-rw-r-- 1 ubuntu ubuntu    0 Apr  2 07:14 hello.sh

read write you--read write group--read write user

chmod +x hello.sh   >> Add execute permission
./hello.sh          >> Execute the shell script


# >>> commnet
Variables store data inside them
Sys Varibles : Created and maintained by linux and unix OS
USer variables

Sys Varibles
echo $BASH  >> Name of the bash shell
echo $BASH_VERSION
echo $HOME
echo $PWD


Take Input from the user:

echo "Enter Name"
read name
echo "Entered Name is $name"

echo "Enter Names"
read name1 name2 name3
echo "Entered Names are $name1 $name2 $name3"


read -p 'username :' user_var 
echo "username is : $user_var"

Enter array by user

echo "Enter Names"
read -a names
echo "Names are ${names[0]} ${names[1]}




echo "Enter Names " 
read 
echo  "Entered Names are $REPLY "   >> Default it will go to reply


./hello.sh a b c

echo $0 $1 $2 $3
args=("$@")
echo ${args[0]} ${args[1]} ${args[2]} ${args[3]}
echo $@    
echo $#


#! /bin/bash
count=10
if[ $count -eq 10 ]
then 
  echo "condition is true"
else
   echo "condition is false"
fi   
   





Integer comparision with angular brackets "< >", use if (( $count > 10 ))
String comparision with angular brackets "< >", use if [[ $word > 'b' ]]




#! /bin/bash
count=10
if[ $count -eq 10 ]
then 
  echo "condition is true"
elif [ $count -eq 11 ]
then 
  echo "something"
else
   echo "condition is false"
fi  





File Handling :

echo -e "Enter the filename : \c"
read filename
if [ -e $filename ]
echo ("$filename exists")
else
echo ("$filename Not exists")

File Test Operators: 
-e : exists
-b : block special file like : image, video
-c : character special file like normal text file
-s : check whether file is empty or not 
-r : Read Permisssion
-w :
-x : Execute permission
-f : exists valid file

cat > filename : override
cat >> filename : append







echo -e "Enter the name of file \c: "
read filename

if [ -f $filename ]
then 
   if [ -w $filename ]
   echo "Write some data then ctrl+d"
   cat >> $filename
   else
   echo "File doesn't have the write permission"
   fi
 else
     echo "Not the valid file"
 fi
 
 

if [ $age -gt 18 ] && [ $age -lt 30 ]
then
   echo "Valid Age"
else
   echo "Invalid Age"


if [ $age -gt 18 -a $age -lt 30 ]
if [[ $age -gt 18 && $age -lt 30 ]]


if [ $age -gt 18 ] || [ $age -lt 30 ]
if [[ $age -gt 18 || $age -lt 30 ]]
if [[ $age -gt 18 -o $age -lt 30 ]]



Arithematic Operations

vi hello.sh

num1=10
num2=5

echo $(( num1 + num2 ))
echo $(( num1 - num2 ))
echo $(( num1 * num2 ))
echo $(( num1 / num2 ))
echo $(( num1 % num2 ))


echo $(expr num1 + num2 )
echo $(expr num1 - num2 )
echo $(expr num1 * num2 )
echo $(expr num1 / num2 )
echo $(expr num1 % num2 )







