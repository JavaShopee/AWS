AWS CloudFormation

AWS CloudFormation is based on Template generation. Here are the components of template :

1. Resource    2. Parameter         3. Mapping         4. Condition      5. Output         6. Metadata

YAML : Data Serilization Language

Yaml KEy Value Pairs : YAML doc will be full of key value pairs
Must have space after colun 
Support different data types integer, Floting point number, Strings
String can be in single or double quotes
Date format : ISO 8601

Name: Sachin
Age: 56
Gpa: 4.2
State: 'New Jersey'
DateOfBirth: 1900-01-01T12:00:00

List/array
Persons:
 - Dave
 - Steve
 - Karl
 Above is known as Block Sequence
 
 Persons: [Dave, Steve, Karl]
 Above is known as Flow Sequence
 
 
YAML list is intended with opening dash.
Dash indicates that it's element of array

YAML Dictionaries : properties grouped together under item.
YAML Dictionaries contains key value pairs

Dave: 
 Age: 45
 Occupation: Engineer
 State: NY
 Male: true
 
 
 
YAML Pipe : It needs to be passes as is(new lines, spaces, indentation) 
Dave: 
 Age: 45
 Occupation: Engineer
 State: NY
 Male: true
 Address: |
|   277 NJ Street
|   New York
|   NY
|   22551
 
YAML Greater Than :
Also referrend to as folded block.
New Line wiht the single space, Blank line as new line

Dave: 
 Age: 45
 Occupation: Engineer
 State: NY
 Male: true
 Address: |
|   277 NJ Street
|   New York
|   NY
|   22551
 About Me >
   Thus is the sample Text.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
   BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
   CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
   
 YAML Comments:
 # This is the simple yaml comment
   
   
YAML File for creating EC2 Instance : 
https://s3.us-east-2.amazonaws.com/cf-templates-u78spvww26p9-us-east-2/2020021Kpl-statck-1.yml
cfn-key-1.pem
cfn-key-2.pem
ami-0d542ef84ec55d71c

AWSTemplateFormatVersion: "2010-09-09"
Resources: 
  DevEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: 'ami-0d542ef84ec55d71c'
      InstanceType: t2.micro
      KeyName: cfn-key-2
      
      
When we create the change set for KeyName, it will be replacement for exiting instance(older one auto terminated)
When we create the change set for InstanceType, the instance will be stopped and restarted
When we create the change set for KeyName with key that doesn't exists, it will auto trigger update rollback event


Resources:
Key Component of stack

Resources: 
  DevEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: 'ami-0d542ef84ec55d71c'
      InstanceType: t2.micro
      KeyName: cfn-key-2
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html


Parameters :
Enables us to input custom value to our template each time when we create or update stack
60 parameters in cfn(cloud formation) tempalte
logical name, alphanumeric
parameter type defined by AWS cfn
must be passed at runtime otherwise default value
declared and referenced within the same template
We can reference parameter from resource and output section of the template
Parameters Propertis


Sample YML1 :

AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName: 
    Description: Select the appropiate key from the list
    Type: AWS::EC2::KeyPair::KeyName
  MyAvailabilityZone: 
    Description: Select the appropiate AZ from the list
    Type: String
    Default: ap-south-1a
    AllowedValues:
      - ap-south-1a
      - ap-south-1b
      - ap-south-1c
  MyInstanceType:
    Description: Select the appropiate Instance Type from the list
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.namo
      - t2.medium
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: 'ami-01e074f40dfb9999d'
      InstanceType: !Ref MyInstanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - default
        - !Ref SSHSecurityGroup
      AvailabilityZone: !Ref MyAvailabilityZone  
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: MySecGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
#     - IpProtocol: tcp
#       FromPort: 8080
#       ToPort: 8080
#       CidrIp: 0.0.0.0/0
# MyEIP:        
#   Type: AWS::EC2::EIP
#   Properties: 
#     GroupDescription: MyEipForEC2
#     InstanceId: !Ref DevEC2Instance 

Sample YML2 :

AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
      
      
      
      Sample YML 3:
      AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
  EnvironmentName:
    Description: Select the Env
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod  
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      
      
      
 Sample YML Templet for Conditions:
 
 AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
  EnvironmentName:
    Description: Select the Env
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod  
Conditions:
  MyEIPForProd: !Equals [!Ref EnvironmentName, prod]
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
  MyEnvironmentMap:
    dev:
      instanceType: t2.small
    prod:
      instanceType: t2.micro
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
  MyEIP:
    Type: AWS::EC2::EIP
    Condition: MyEIPForProd 
    Properties:
      InstanceId: !Ref DevEC2Instance


Sample YML wiht IF :
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
  EnvironmentName:
    Description: Select the Env
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod  
Conditions:
  MyEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Equals [!Ref EnvironmentName, prod]
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
  MyEnvironmentMap:
    dev:
      instanceType: t2.small
    prod:
      instanceType: t2.micro
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref SSHSecurityGroup], !Ref 'AWS::NoValue']
  MyEIP:
    Type: AWS::EC2::EIP
    Condition: MyEIPForProd 
    Properties:
      InstanceId: !Ref DevEC2Instance
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: MySecGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
        
        
Yaml for NOT Interensic Function :
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
  EnvironmentName:
    Description: Select the Env
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod  
      - qa
Conditions:
  MyEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Not [{Condition: CreateProdSecurityGroup}]
# CreateDevSecurityGroup: !Equals [!Ref EnvironmentName, dev]
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
  MyEnvironmentMap:
    dev:
      instanceType: t2.small
    prod:
      instanceType: t2.micro
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref SSHSecurityGroup], !Ref 'AWS::NoValue']
  MyEIP:
    Type: AWS::EC2::EIP
    Condition: MyEIPForProd 
    Properties:
      InstanceId: !Ref DevEC2Instance
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: MySecGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
        
        
YAML If Condition :

AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
  EnvironmentName:
    Description: Select the Env
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod  
      - qa
Conditions:
  MyEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Not [{Condition: CreateProdSecurityGroup}]
  CreateMyKey: !OR [!Equals [!Ref AWS::Region,ap-south-1],!Equals [!Ref AWS::Region,us-west-1]]
# CreateDevSecurityGroup: !Equals [!Ref EnvironmentName, dev]
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
  MyEnvironmentMap:
    dev:
      instanceType: t2.small
    prod:
      instanceType: t2.micro
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !If [CreateMyKey,cfn-key-1,cfn-key-2]
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref SSHSecurityGroup], !Ref 'AWS::NoValue']
  MyEIP:
    Type: AWS::EC2::EIP
    Condition: MyEIPForProd 
    Properties:
      InstanceId: !Ref DevEC2Instance
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: MySecGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
        
        
Intrinsic Function AND

AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
  EnvironmentName:
    Description: Select the Env
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod  
      - qa
Conditions:
  MyEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Not [{Condition: CreateProdSecurityGroup}]
  CreateMyKey: !And [!OR [!Equals [!Ref AWS::Region,ap-south-1],!Equals [!Ref AWS::Region,us-west-1]], !Equals [!Ref EnvironmentName, prod]]
# CreateDevSecurityGroup: !Equals [!Ref EnvironmentName, dev]
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
  MyEnvironmentMap:
    dev:
      instanceType: t2.small
    prod:
      instanceType: t2.micro
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !If [CreateMyKey,cfn-key-1,cfn-key-2]
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref SSHSecurityGroup], !Ref 'AWS::NoValue']
  MyEIP:
    Type: AWS::EC2::EIP
    Condition: MyEIPForProd 
    Properties:
      InstanceId: !Ref DevEC2Instance
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: MySecGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 


Output 


AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
  EnvironmentName:
    Description: Select the Env
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod  
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !Ref SSHSecurityGroup
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: MySecGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0  
Outputs:
  MyInstanceId:
    Description: My Instance Id
    Value: !Ref DevEC2Instance  
  MyDNSName:
    Description: My DNS Name
    Value: !GetAtt DevEC2Instance.PublicDnsName
    
Output with conditions:

AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
  EnvironmentName:
    Description: Select the Env
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
Conditions:
  CreateDevSecurityGroup: !Equals [!Ref EnvironmentName, dev]          
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !If [CreateDevSecurityGroup, [!Ref SSHSecurityGroup], !Ref 'AWS::NoValue']
        - !Ref SSHSecurityGroup
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: MySecGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0  
Outputs:
  MyInstanceId:
    Description: My Instance Id
    Value: !Ref DevEC2Instance  
  MyDNSName:
    Description: My DNS Name
    Value: !GetAtt DevEC2Instance.PublicDnsName
  MyInstanceAZ:
    Description: My Instance AZ
    Value: !GetAtt DevEC2Instance.AvailabilityZone
    Export:
      Name: !Sub "${AWS::StackName}-InstanceAz"
  MyDevSSHSecurityGroup:
    Description: My Dev SSH Security Group
    Value: !Ref SSHSecurityGroup
    Condition: CreateDevSecurityGroup
    Export: 
      Name: MyDevSSHSG
      
      
                      CI / CD   
>>>>>>>>>>>>>Source >>>>>>>>>>>>>>>>>>>>>>Build>>>>>>>>>>>>>>>>Test>>>>>>>>>>>>>>>>>>>>>>>>>>>Production>>>>>>>>>>
-Check in source code         - Compile the code           Integration Test                   Deploy 
                                and create war             UI Test                            Monitor
-Peer review new code         - Build Artifacts,           Load Test
                                Unit Tests                 Security Test
                                
-----------------------CI-----------------------                                
-----------------------------------------------C Delivery-------------------------------------Manula App-----------
------------------------------------------------C Deployment--------------------------------------------------------
-------------------------------IASC---------------------------------------------------------------------------------

Source  >> Code Commit
-Version Control
-Secure and Safe
-Store and manage the source code


Build   >> Code Build
-Compilation
-Run test
-Build Packages
-Pay By Min
-No Build servers to manage
-Monitor Build thru cloud watch events



Test    >> Code Build + Third Party Tools
-Compilation
-Run test
-Build Packages
-Pay By Min
-No Build servers to manage
-Monitor Build thru cloud watch events


Deploy  >> Code Deploy
-Automated Code deployments
-Rollback 
-No Downtime

Monitor >> AWS X Ray, AWS Coud Watch
-Monitor source checkins
-trigger builds
-moniotr builds
-collect logs
-monitor infrastructure

All this is manageed together by AWS Service : AWSCodePipeline




AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
Resources:
  MyCICDEC2InstanceProfileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: MyCICDEC2InstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 's3.Get'
                  - 's3.List'  
                Resource: '*'
  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref MyCICDEC2InstanceProfileRole  
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-01e074f40dfb9999d
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !Ref MySecurityGroup
      IamInstanceProfile: !Ref MyInstanceProfile
      Tags: 
        - Key: Name
          Values: dev   
        - Key: Environment
          Values: stage
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update
          sudo yum install ruby
          sudo yum install wget
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          cd /home/ec2-user
          wget https://aws-codedeploy-ap-south-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto  
  ProdEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-01e074f40dfb9999d
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !Ref MySecurityGroup
      IamInstanceProfile: !Ref MyInstanceProfile
      Tags: 
        - Key: Name
          Values: prod   
        - Key: Environment
          Values: prod
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update
          sudo yum install ruby
          sudo yum install wget
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          cd /home/ec2-user
          wget https://aws-codedeploy-ap-south-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto


  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: MySecGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0  
Outputs:
  StageAppUrl:
    Description: Staging App URL
    Value: !Sub 'http://${DevEC2Instance.PublicDnsName}:8080/ccdemo/hello'                    
  StageAppUrl:
    Description: Production App URL
    Value: !Sub 'http://${ProdEC2Instance.PublicDnsName}:8080/ccdemo/hello'                      



User Name	Password
SachinAroraAdminUser-at-268423473689	djfH13JAsh7pDmdaqR9f3AxOXs/iDScinm7w3Zr6Rm4=


#!/bin/bash
sudo yum update
sudo yum install ruby
sudo yum install wget
sudo yum -y erase java-1.7.0-openjdk.x86_64
sudo yum -y install java-1.8.0-openjdk.x86_64
sudo yum -y install java-1.8.0-openjdk-devel
sudo yum -y install tomcat8
cd /home/ec2-user
wget https://aws-codedeploy-ap-south-1.s3.amazonaws.com/latest/install
chmod +x ./install
sudo ./install auto
