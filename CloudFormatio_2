Stacks :

If we try to change the key associated with the instance, then Relacement will be true.
If we try to change the instance type associated with the instance,then Relacement will be false.
If we try to add the new rules in SG ,then Relacement will be false.
IF the kwy is non existing, it will auto rollback


Resources :

AWSTemplateFormatVersion: "2010-09-09"
Description: Basic EC2 Instance
Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 
      InstanceType:
      KeyName:
      SecurityGroups:
        - default
        
        
        
        
AWSTemplateFormatVersion: "2010-09-09"
Description: Basic EC2 Instance
Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 
      InstanceType:
      KeyName:
      SecurityGroups:
        - default 
        - Ref SSHSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: New SSH SecurityGroups
      SecurityGroupIngress:
        - Ipprotocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
          
Ref is a Intrinsic function, it returns value of specified parameter or resource.          



Parameters allows to input custom values to our template each time when we create or update stack
Max 60 parameters in cfn template
We can refrecne parameters from Resources and Output section of the template


Parameter:

Parameters:
  MyKeyName:
    Description: 'My Key Name'
    Type: AWS::EC2::KeyPair::KeyName
  MyAZ:
    Description: My AZ
    Type: String
    Default: 
    AllowedValues:
  MyiNSTANCEtYPE:
    Description: My iNSTANCE tYPE
    Type: String
    Default: T2.MICRO
    AllowedValues:  
      - t2.micro
      - t2.small
      - t2.medium
      
      
 Mappings:
 
 We can use Intrinsic function FindInMap to retrieve values in map
 
 
 Mappings:
  MyMappingsForInstanceType:
    us-east-2:
      HVM64: imageid1
    us-west-2:
      HVM64: imageid2 
  MyEnvironment:
    dev:
      HVM64: t2.micro  
    prod:
      HVM64: t2.small 



Conditions: 
  MyDevEnv: !Equals [!Ref Env, dev]  
  MySecGrpForDev: !Equals [!Ref Env, dev]  
  MySecGrpForProd: !Equals [!Ref Env, prod]
  MySecGrpForDev: !Not [{Condition: MySecGrpForProd}]  
  RegionForKey: !Or [!Equals [!Ref 'AWS::Region', 'ap-south-1'], !Equals [!Ref 'AWS::Region', 'us-east-2']]
Resources: 
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyMappingsForInstanceType
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironment
        -  !Ref Env 
        - HVM64
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [MySecGrpForDev, [!Ref SSHSecurityGroupDev], [!Ref SSHSecurityGroupProd]] 
  SSHSecurityGroupDev:
    Type: AWS::EC2::SecurityGroup
    Condition: MySecGrpForDev
    Properties:
      GroupDescription: SSHSecurityGroupDev
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  SSHSecurityGroupProd:
    Type: AWS::EC2::SecurityGroup
    Condition: MySecGrpForProd
    Properties:
      GroupDescription: MySecGrpForProd
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0        
