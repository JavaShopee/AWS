Stacks :

If we try to change the key associated with the instance, then Relacement will be true.
If we try to change the instance type associated with the instance,then Relacement will be false.
If we try to add the new rules in SG ,then Relacement will be false.
IF the kwy is non existing, it will auto rollback


Resources :

AWSTemplateFormatVersion: "2010-09-09"
Description: Basic EC2 Instance
Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 
      InstanceType:
      KeyName:
      SecurityGroups:
        - default
        
        
        
        
AWSTemplateFormatVersion: "2010-09-09"
Description: Basic EC2 Instance
Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 
      InstanceType:
      KeyName:
      SecurityGroups:
        - default 
        - Ref SSHSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: New SSH SecurityGroups
      SecurityGroupIngress:
        - Ipprotocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
          
Ref is a Intrinsic function, it returns value of specified parameter or resource.          



Parameters allows to input custom values to our template each time when we create or update stack
Max 60 parameters in cfn template
We can refrecne parameters from Resources and Output section of the template


Parameter:

Parameters:
  MyKeyName:
    Description: 'My Key Name'
    Type: AWS::EC2::KeyPair::KeyName
  MyAZ:
    Description: My AZ
    Type: String
    Default: 
    AllowedValues:
  MyiNSTANCEtYPE:
    Description: My iNSTANCE tYPE
    Type: String
    Default: T2.MICRO
    AllowedValues:  
      - t2.micro
      - t2.small
      - t2.medium
      
      
 Mappings:
 
 We can use Intrinsic function FindInMap to retrieve values in map
 
 
 Mappings:
  MyMappingsForInstanceType:
    us-east-2:
      HVM64: imageid1
    us-west-2:
      HVM64: imageid2 
  MyEnvironment:
    dev:
      HVM64: t2.micro  
    prod:
      HVM64: t2.small 



Conditions: 
  MyDevEnv: !Equals [!Ref Env, dev]  
  MySecGrpForDev: !Equals [!Ref Env, dev]  
  MySecGrpForProd: !Equals [!Ref Env, prod]
  MySecGrpForDev: !Not [{Condition: MySecGrpForProd}]  
  RegionForKey: !Or [!Equals [!Ref 'AWS::Region', 'ap-south-1'], !Equals [!Ref 'AWS::Region', 'us-east-2']]
Resources: 
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyMappingsForInstanceType
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironment
        -  !Ref Env 
        - HVM64
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [MySecGrpForDev, [!Ref SSHSecurityGroupDev], [!Ref SSHSecurityGroupProd]] 
  SSHSecurityGroupDev:
    Type: AWS::EC2::SecurityGroup
    Condition: MySecGrpForDev
    Properties:
      GroupDescription: SSHSecurityGroupDev
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  SSHSecurityGroupProd:
    Type: AWS::EC2::SecurityGroup
    Condition: MySecGrpForProd
    Properties:
      GroupDescription: MySecGrpForProd
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0    
          
          
!GetAtt : Get the value of resource property
!GetAtt MyVMInstance.AvailabilityZone
Like MyVMInstance.AvailabilityZone

!Sub Intrincic function: 
Substitute the value of pseudo param with it's value
!Sub "${AWS::StackName}-InstanceAz"

We can use intrinsic function ImportValue to import values that have been exported within the same region.



Outputs:
  MyInstanceId:
    Description: My Instance Id
    Value: !Ref DevEC2Instance  
  MyDNSName:
    Description: My DNS Name
    Value: !GetAtt DevEC2Instance.PublicDnsName
  MyInstanceAZ:
    Description: My Instance AZ
    Value: !GetAtt DevEC2Instance.AvailabilityZone
    Export:
      Name: !Sub "${AWS::StackName}-InstanceAz"
  MyDevSSHSecurityGroup:
    Description: My Dev SSH Security Group
    Value: !Ref SSHSecurityGroup
    Condition: CreateDevSecurityGroup
    Export: 
      Name: MyDevSSHSG
      
Full Template:

AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the key pair
  EnvironmentName:
    Description: Select the Env
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
Mappings:
  MyRegionMap:
    ap-south-1:
      HMV64: 'ami-01e074f40dfb9999d'
    us-east-2:
      HMV64: 'ami-0d542ef84ec55d71c'
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small
Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HMV64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !Ref SSHSecurityGroup
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: MySecGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0  
Outputs:
  MyInstanceId:
    Description: My Instance Id
    Value: !Ref DevEC2Instance  
  MyDNSName:
    Description: My DNS Name
    Value: !GetAtt DevEC2Instance.PublicDnsName
  MyInstanceAZ:
    Description: My Instance AZ
    Value: !GetAtt DevEC2Instance.AvailabilityZone
    Export:
      Name: !Sub "${AWS::StackName}-InstanceAz"
  MyDevSSHSecurityGroup:
    Description: My Dev SSH Security Group
    Value: !Ref SSHSecurityGroup
    Condition: CreateDevSecurityGroup
    Export: 
      Name: MyDevSSHSG
      
      
Cross referencing the stack Exports from one stack to other       
We can export Securtiy Group in Global Stack and all other stack can reference same Global Security Group.
If we change the Securtiy Group in parent stack , it will be auto refelected to child stacks as well

We can't delete the stack if another stack reference one of it's output
We can't modify the output if it's referenced in other stacks.



Resources
Paraeters
Conditions
Mappings
Metadata
UserInput
Outputs >> Exports

Metadata provides details abt cfn template. There are 3 types of metadata keys:
AWS::Cloudformation::Designer
AWS::Cloudformation::Init
AWS::Cloudformation::Interface

AWS::Cloudformation::Init :
Group together the parameter of similar type
like AZ, InstanceType, KeyName Vs EnvironmentName(Environment related parameter)






#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_EC2.html
AWSTemplateFormatVersion: "2010-09-09"
Description: Helper Script Demo
Resources:
  myVPC:  
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true 
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-myVPC" 
  mySubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref myVPC 
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-mySubnet" 
  myRT:  
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: Public Subnet
      VpcId: !Ref myVPC 
  mySubToRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref myRT
      SubnetId: !Ref mySubnet
  myIGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
    Tags: 
      - Name: myInterntGateway
  myIGWToVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref myIGW
      VpcId: !Ref myVPC
  myRoute:
    DependsOn: myIGWToVpc
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myIGW
      RouteTableId: !Ref myRT
  
