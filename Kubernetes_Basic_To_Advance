kubectl config view    >> Status of k8 cluster
minikube start
minikube status
minikube stop

Create first deployment 
kubectl create deployment hello-nodes --image=k8s.gcr.io/echoserver:1.4
kubectl get deployment
kubectl get pods

Expose the deployment to create service which can be accessed thru external world
kubectl expose deployment hello-nodes --type=LoadBalancer --port=8080
kubectl get services
minikube service hello-nodes

Cleanup
kubectl delete service hello-nodes
kubectl delete deployment hello-nodes


Namespace : are the ways to separate and organize objects in K8s
kubectl get namespaces
kubectl get pods --namespace <namespace_name>
kubectl get pods --all-namespaces
kubectl create namespace <namespace_name>

High Availability in K8s cluster >> Multiple control plane >> Multi master and multi worker node toplogoy
User will need LB to communciate with multiple control planes
+
Worler node will also communcate with LB

ETCD Management : 

Stacked ETCD :
2 mater node >> 2 control palne >>  scheduler , controler, etcd, api server
two etcd will communicate with each other called stacked etcd

External ETCD : Remove etcd from each control plane
Each etcd is maintained on separate server, two etcd will communicate with each other 


K8s Management Tools :
kubectl 
kubeadm : Create the K8 cluster and helping users to make the cluster functional
Minikube
Helm : Poweful tool for K8s tempate and package mgt, Ability to convert K8s objetcs in reusable templates, Ability to provide complex multi 
configation template with cross connectivity

Kompose : translate docker compose file into kubernetes object
Kustomize : Configuration  Mgt tool similar to HELM




************* HA K8s Cluster *************
************* Install Kubernertes on Master Node *************

1. Upgrade apt packages
sudo apt-get update

2. Install Docker Engine
sudo apt-get install -y docker.io

3. Install Support packages
sudo apt-get install -y apt-transport-https curl

4. Retrieve the key for the Kubernetes repo and add it to your key manager
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

5. Add the kubernetes repo to your system
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

6. Install the three pieces youâ€™ll need, kubeadm, kubelet, and kubectl
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

7. Create the actual cluster
kubeadm init --pod-network-cidr=192.168.0.0/16

Note - Notedown the Command to join cluster

8. Install the Calico network plugin
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

9. Untaint the master so that it will be available for scheduling workloads
kubectl taint nodes --all node-role.kubernetes.io/master-

10. Get Cluster Nodes
kubectl get nodes


*****************************************************************************


