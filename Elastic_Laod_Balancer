Elastic_Laod_Balancer

User sending taffic to ELB  >> Forwarding the traffic to >> 10 EC2 instances
ELB >> Security Group >> ELB-SG
10 EC2 Instances >> Security Group >> EC2-SG

Incoming Traffic to LB >> HTTP, HTTPS all traffic from externa users 0.0.0.0/0
Outgoing Traffic from LB >> HTTP, HTTPS to EC2-SG

Incoming traffic to 10 EC2 Instances >> HTTP, HTTPS from ELB-SG
Incoming traffic from 10 EC2 Instances >> HTTP, HTTPS all traffic to externa users 0.0.0.0/0

Note : Ougoing traffic should be sent from instances to the users directly(Not from LB)

SSL(Secure Socket Layer)/TLS Certificate
User -----------Transaction ------------> Banking Server
It's important that connection is closed and encrypted.
To your Banking Server, they just upload SSL/TLS Cerificate. The cerifcate is issued to ensure the channel from end user to 
Website is encrypted and kept secure.

2 Ways to upload cerificate:
1. Upload  on 10-50 instances
2. to the load balancer ?? >> SSL Termination. Load Balancer will encrpt the front end connection from users.
LB will encrpt the frond end connection and decrypt the backend traffic/connection >> called SSL termination.

AWS Certificate Manager
AWS Certificate Manager (ACM) makes it easy to provision, manage, deploy, and renew SSL/TLS certificates on the AWS

If I included HTTPS/SSL Traffic in the front end, I need that certificate on my website.

LB is region specific resource. Will work on mutilpe AZs in single region

Listener defines port and protocol specific to front end and back end connection.

Classic Load Balancer >> Works with 2 layes: Transport and Application Layer. No advanced routing mechanism

Application Load Balancer >> Advanced compared to Classic Load Balancer. Only entertains HTTP and HTTPS traffic. Used for 
content based routing.You can just route the traffic to ports,IP addresses, containers, microservices

Network Load Balancer >> Newest, Ultra High Perfomcnae, Fast, millions of request per sec.
Should be handling millions of request, ecommerce platform.


Launch 2 instances with script :
#!/bin/sh
yum -y install httpd php
chkconfig httpd on
/etc/init.d/httpd start
cd /var/www/html
wget https://s3-us-west-2.amazonaws.com/us-west-2-aws-training/awsu-spl/spl-03/scripts/examplefiles-elb.zip
unzip examplefiles-elb.zip


This will install apache php over the instances.

Stickiness : User will be redirected to same instance for predetermined time.
Logs can be generated in S3 bucket

******************************************************************************
Auto Scaling : Based on the principle of elasticity
It's a concept wherein you can expand and shrink the infrastructure based on 
> Incoming Traffic
> Time of Day
> Demand

Normal Days > 20 instances
Christmas Sale > 200 instances

Auto Scaling Components :1.  Auto Scaling Group 
                          It is a logical collection of identical EC2 instances.
                          Group the instances together depending upon the services/application running upon them.

For Example : ASG1 : 3 Instances > Running Wordpress Site
            : ASG2 : 4 Instances > Running Drupal Application
            
2. Launch Configuration : 
Ability to launch and terminate the instances automatically
What should be the AMI, Security Grp, EBS Volume, Instance Type, Key Pairs, Softwares/Scripts/Application ??

Auto Scaling as a service will refer to Launch Configuration to undersatnd the specification
and based upon that it will deploy the instances in auto scaling group.

3. Scaling Policies : Scale Out / Scale In
Scale Out : Increase/ Launch the num of instances within auto scaling group
Scale In  : Decrease/ Terminate(Not STOP) the num of instances within auto scaling group

4. Scaling Plan :
Fixed : Fix the num of instances up and running within ASG
Dynamic : Depending upon certain threshold, increase /decrease num of instances up and running within ASG
Dynamic Example : 
            CPU usage of entire ASG > 80, Scale Out
            CPU usage of entire ASG < 30, Scale In
Scheduled Action(Time of Day) : Depending upon Time/Date, SacleOut/ScaleIn


Customized AMI :
1. Launch EC2 using public AMI
2. Insatll application/services/software upon launched instance
3. Capture Image

Example : Create EC2 using , and Install Apache Web server, MySQL DB and a wordpress site upon it
Run the commande : Create Image >> Get the custom AMI
Image : Bundle of all the above software/services


Create 2 instance with Apache PHP 
Create Image > I will create custome AMI and Snapshot for volumes
Create Classic load balancer
Auto Scaling> Launch Config

Health Check Grace Period (300 Sec) >> New Instances will take some time to come up and runnign.
They should not be declared unhealthy by LB

Health Check Type: ELB /EC2
ELB : take into account ELB health check + EC2 health check 
EC2 : Just EC2 status checks only

Target Tracking policy : 
Cloudwatch will measure the performance of ASG(with 3 instnces) and ensure overall CPU utilization(Metric)
is not more than 70%
CPU utilization reached 90%
Cloudwatch will send alert to ASG and email to you
Auto Scaling will trigger scale out policiy (launch 2 more instaces)
Auto Scaling refers to Lauch config and launch 2 more instacnes in same ASG


CoolDown Period : Cloud Watch should allow atleast 300 sec (HCGP) before declaring the instance unhealthy.  
We give 5 mins to new launched instaces to install all apps, scripts, software before they come into action

WarmUp Period : 300 sec by default , applies to Step Scaling policies, time between two consequtive steps


Scaling Policies with steps : 
Add 2 more instances if CPU utilization is b/w 30 to 40 %
Add 2 more instances if CPU utilization is b/w 40 to 50 %
Add 2 more instances if CPU utilization is b/w 50 to 60 %
Add 2 more instances if CPU utilization is b/w 60 to 80 %

I am adding my 8 instances in 4 different steps


sudo yum install stress >> to bump up cpu utilization
stress -c 5

****************************
Load Balancer : Performs the health check after every 30 seconds. If the instance stop responding, it will redirect the 
traffic to instance in same or different AZ.


Connection Draining : Data Traffic (from User to EC2)
HC Traffic (from LB to EC2)


Whenever EC2 instance fails the health check, it ensures that existing connections are being taken care of
and future traffic will not be redirected to Unhealth instances.


Stickness : User subsequent request/session wil be redirectied to only one instance tied to LB
Cookie stored in User's browser : AWS ELB cookie
Generally used in e commerce platforms.










