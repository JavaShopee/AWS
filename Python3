Python3

Getting Started with Python

5//2                        >> Integer Division
2 ** 3                      >> 2 raise to power 3
print('Sachin/'s "laptop"') >> ignore the special meaning
print(r'c\docs\navin')      >> Raw String


Variables in Python
_ (Underscore) represents the output of the previous operation
_ + 9

name[-1]

 0  1  2  3  4  5  6  
-7 -6 -5 -4 -3 -2 -1 


String in python is immutable, you can't change the value of it.
name[0:3] = 'my' >> Not allowed


List in Python :
List of list : 

names = ['abc','def','ghi','jkl']
nums = [1,2,3,4,5,6,7]
mil = [names, nums]

List is mutable
nums.append(2,22) >> 22 at 2nd pos

del nums[2:]
nums.extend([1,2,3,4,5])



Tuple : is immutable
tup = (1,2,3,4,5)
tup = (1,12,33,45,66,77,'sach')
print(tup)


Set : Unique Values, Insertion order not maintained so index number not supported
s = {12,33,45,66,77,54,54}  >> Dups not allowed

Dict:
Keys = [1,2,3,4,5]
Values = ['a','b','c','d','e']

data = dict(zip(Keys,Values))
print(data)

data[6] =  'f'  # add into dictionary 
del data[6]     # delete from dictionary


Complex Dictionary Example :
prog =  {'JS':'Atom','Java':{'JSE':'Netbeans','JEE':'Eclipse'},'Python':['Sublime','PyCharm']}

print(prog['Java']['JEE'])
print(prog['Python'][1])


Bitwise Operators :
Complement(~)
AND
OR 
XOR
Left Shift
Right Shift 

for Else in Python :
lst = [12,13,14,23,34,451,32]

for i in lst:
    if i %5==0:
        print(i)
else:
    print("Not Found")
    
    
    
from array import * 
val = array('i',[11,23,32,34,55,66,54,43,22])
print(val.buffer_info())

##Print Array :

print(val)

for i in range(len(val)):
    print(val[i])
    
from array import * 

val = array('i',[11,23,32,34,55,66,54,43,22])
print(val)


Character Array in python :
from array import * 

chars = array('u',['a','e','i'])
print(chars)

for i in chars:
    print(i)
    
    
    

for i in val:
    print(i)


Copy array to another array: 

from array import * 

vals = array('i',[21,22,34,45,66,77,65,21])

chars = array(vals.typecode,(a for a in vals))
print(chars)



Creating empty array :

vals = array('i',[])


Take array from user using append()
from array import * 
n = int(input("Enter the length of array"))

arrmy = array('i',[])

for i in range(n):
    x = int(input("Enter the next element"))
    arrmy.append(x)
    
    
for e in arrmy:
    print(e)
    
    
    
finding the index of elm : 

from array import * 
n = 77
arrmy = array('i',[11,23,13,45,43,55,66,77,54])
print(arrmy.index(n))


array package doesn't support 2D array

Numpy array creation:
from numpy import * 

arr = array([12,32,33,11,34,56,76],int)

print(arr)

Typecode is optional using numpy

Ways of creating array using Numpy
1. array()    2. linspace()   3. logspace()   4. arange
5. zeros()    6. ones()


1. array() : 

from numpy import *
k = array([1,2,3,4,5],float)
print(k)
    
2. linspace(from, to , parts)
from numpy import * 
k = linspace(0,15,16)   >> return float
print(k)
Third argument is optional, default is 50 parts

3. arange(from, to , steps)
from numpy import * 
k = arange(0,15,2)
print(k)

4. logspace(from , to , parts)
k = logspace(0,15,5)
print(k)
10^1 to 10^ 15 and 5 parts NOT equally spaced

5. ones(5,int)
6. zeros(5,int)





Mathemacial operatons using numpy
from numpy import *

vals = array([21,22,34,45,66,77,65,21])

k = print(sin(vals))
k = print(cos(vals))
k = print(tan(vals))
k = print(sum(vals))
k = print(sqrt(vals))


Copy one array to other:
arr1 = arr2
arr2 = arr1.copy() >> Deep Copy 
arr2 = arr1.view() >> Shallow copy 



Multidimensional Array :

from numpy import *

arr1 = array([
               [1,2,3,4,5],
               [3,4,5,6,7]
             ])
print(arr1.dtype) int32
print(arr1.ndim)  2
print(arr1.size)  10 
print(arr1.shape) (2,5)  2 rows 5 columns 





Converitng 1D to 2D/3D array, 2D to 1D array 
from numpy import *
arr1 = array([
               [1,2,3,4,5,6],
               [3,4,5,6,7,8]
             ])
arr2 = arr1.flatten()
arr3= arr2.reshape(2,2,3)




Matrix/multi dim array in python
from numpy import *

m1 = matrix('1,2,3;3,4,5;4,5,6')
m2 = matrix('1,4,3;9,4,1;4,7,6')
m3 = m1 +m2

print(m1)
print(m2)
print(m3)



List is mutable Vs String/Integer Immutable:
def update(x):
    print(id(x))
    x[1] = 80
    print(id(x))
    print("x ", x)

lst = [10,20,30]
print(id(lst))
update(lst)
print("lst ",lst)

29312904
29312904
29312904
x  [10, 80, 30]
lst  [10, 80, 30]

String/Integer Immutable

def update(x):
    print(id(x))
    x = 80
    print(id(x))
    print("x ", x)

a=10
print(id(a))
update(a)

print("a ",a)

1917118528
1917118528
1917119648
x  80
a  10


Formal Arguments
Actual Arguments >>
Position  : add(name,age)     add('sachin',30)
Keyword : add(name,age)  add(age=30,name='sachin')
Default : add(name,age)  add('sachin',age=18)
Variable Length  >>
def sum(a,*b):
    c=a
    for e in b:
        c=c+e
    print(c)


sum(2,3,4,5,6)


Keyworded Variable Length Arguments: 
def person(name, **data):
    print(name)
    for i,j in data.items():
        print(i,j)
person('sachin',age=30,rol=20,gender='M')


lst = [1,2,3,4,5,6,7,8,9,10]
k=list(filter(lambda a:a%2==0,lst))
print(k)


from functools import reduce
lst = [1,2,3,4,5,6,7,8,9,10]


reduce belogs to module called functools
doubleit = reduce(lambda a,b:a+a,lst)
print(doubleit)




Decorators in Python :
def div(a,b):
    return a/b
    

def smart_div(func):
    def inner(a,b):
        if a < b:
            a,b = b,a
        return func(a,b)
    return inner
    
    
div = smart_div(div)

k = div(2,4)
print(k)




Modules in python : 
from Calc import * 

addition = add(2,3)
print(addition)


Calc.py:
def add(a,b):
    return a+b 
def sub(a,b):
    return a-b 
def mul(a,b):
    return a*b
    
   
__name__ = __main__ for currnet page
otherwise module name

from Calc import add > It will import all functions from Calc modules if main function is calling all other functions
   
   
   
    
    
