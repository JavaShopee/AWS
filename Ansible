https://www.youtube.com/watch?v=sGeZm__pZ9I&list=PL2qzCKTbjutIyQAe3GglWISLnLTQLGm7e

Ansible is called Agent less Architecture:  We are not going to insatll any software on remote servers to work from Ansible Engine 
Module( like shell) will be pushed to Managed Nodes (Engine is going to push on Managed Nodes and Not Vice Versa ... So called Push Mechanism)
idempotent : If there are changes, then and only then file will be copied, otherwise CHANGED=FALSE        COPY Module


Modules : Ping ,Copy(src,dest,backup=yes) ,Shell ,Fetch(src,dest,flat=yes) ,file(path,state,mode='0777'),yum(name, state), command(default module if you don'tmention any module) 
setup,raw(if python is NOT installed on managed node),set-fact,debug


Use of set-fact module
---
 - hosts: localhost
   gather_facts: false
   tasks:
   - shell: "bash --version"
     register: bash_ver
   - set_fact:
      bash_version: "{{bash_ver.stdout.split('\n')[0].split()[3]}}"
   - debug: var=bash_version


ansible 13.232.165.93 -m yum -a "name=git state=latest" -b -k -K
-k :: SSH Password
-K :: Sudo Password (visudo)

Diff Shell and Commnad Module
Commnad : Default
          $HOME will not work
          < ,> ,|, & will not work


Ansible : Open Source Automation tool
        : Simple to setup and powerful
        : Perform 
             : Configuration Mgt
             : Application Deploymelnt
             : Task Automation
             : IT orchestration
             
             
Ansible Architecture :

Ansible Engine / Controller / Master : Where you install your Ansible
Ansible Nodes / Clients :  Servers that you are going to manage with Ansible

Invntory File : IPs/ FQDN of Ansible nodes
Ansible.cfg : PWD for remote server users/ Parameters to work with Remote Seeervrs, Path of Inventory File

Playbook / Adhoc Commands using Modules
Ansible uses SSH connectivity to work with Remote Servers

Ansible is called Agent less Architecture:  We are not going to insatll any software on remote servers to work from Ansible Engine 
Python/ YAML based Syntax
Large number of Ready to use modules for System Mgt
Custom modules can be added if needed

https://github.com/ValaxyTech/DevOpsDemos/blob/master/Ansible/Ansible_installation_on_RHEL8.MD
https://www.youtube.com/watch?v=-Y8Oatd49qA
Install Python latest version (on Control node and Managed host)

yum install python3 -y
By default, python3 is the command to run python commands. to use just python, use "alternatives" command. (on Control node and Managed host)

alternatives --set python /usr/bin/python3
Check for Python version

python --version
Install python-pip package manager (on Control node)

yum -y install python3-pip

Ansible Installation on RHEL 8  

>> sudo su 
>> yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
from https://fedoraproject.org/wiki/EPEL
>> yum install ansible
>> ansible --version

Launch Amazon Linux 

On Master and Hosts:

>> useradd ansadmin
>> useradd -m ansadmin (for Ubuntu)
>> passwd ansadmin
>> visudo
ansadmin     ALL=(ALL)
>> vi /etc/ssh/sshd_config
/PasswordAuthentication yes

>>systemctl restart sshd
>>service sshd restart

On Master
>>sudo su ansadmin 
>>cd
>>ssh-keygen
>>cd .ssh/
>>ssh-copy-id host-ip
>>cd
>>cd /etc/ansible/
>>sudo vi hosts

Add IP of Hosts in hosts file

>> ansible all -m ping


The default ansible home directory c which consists of
hosts
roles
ansible.cfg  >> /etc/ansible/hosts

/etc/ansible/ is called defauly ansible home
             
             
[ansadmin@localhost ansible]$ cd
[ansadmin@localhost ~]$ mkdir my_ansible_working_dir
[ansadmin@localhost ~]$ cd my_ansible_working_dir/
[ansadmin@localhost my_ansible_working_dir]$ cp -rpP /etc/ansible/* .
[ansadmin@localhost my_ansible_working_dir]$ ls -lrt
total 28
drwxr-xr-x. 2 ansadmin ansadmin     6 Nov  4 01:54 roles
-rw-r--r--. 1 ansadmin ansadmin 19985 Nov  4 01:54 ansible.cfg
-rw-r--r--. 1 ansadmin ansadmin    15 Nov 26 14:20 myhosts
-rw-r--r--. 1 ansadmin ansadmin  1007 Nov 26 14:22 hosts


Everytime engine connect to node, it's asking for yes/no 
export Ansible_Host_Key_Checking = False

ansible.cfg > 
host_key_checking = False

Inventory file with Groups and Group of Groups


[ansadmin@localhost my_ansible_non_prod]$ vi hosts
[ansadmin@localhost my_ansible_non_prod]$ ansible group1 -m ping
[ansadmin@localhost my_ansible_non_prod]$ ansible group1:group2 -m ping

vi hosts
[group1]
localhost

[group2]
13.233.129.209

[db_oracle:children]
group1
group2


cp -rpP -r /etc/ansible/* .       >> Command to copy all files and dir

Ansible.cfg file locations with priority
1. ANSIBLE_CONFIG env variable
2. ./ansible.cfg from current dir
3. ~/.ansible.cfg from home dir (/home/ansadmin)
4. /etc/ansible/ansible.cfg



How Ansible works ?
Tasks wil be excuted on Managed Nodes only
Module( like shell) will be pushed to Managed Nodes (Engine is going to push on Managed Nodes and Not Vice Versa ... So called Push Mechanism)
Chef follows pull mechanism

Not insatlling any Software on Remote Nodes : Agent Less Architecture
Once the tasks will be exeuted, module from Managed Node will be removed

ANSIBLE_KEEP_REMOTE_FILES=1 ansible all -m ping
But where it will store Module on Managed Nodes  ??? /home/ansadmin/.ansible/tmp


In ansible.cfg file, there is a parameter forks :
forks = 5 (default) means at a time it's going to execute task on 5 Managed Nodes
if 12 servers, 3 goes

ansible all -m shell -a "sleep 5 ; echo 'hi'"
forks = 1 : Serial Execution instead of Parallel Execution



Module will be pushed here and result will be sent back to Control Node


Modules : Through modules, you can work with remote nodes. Predefined scripts to work with Remote nodes


Introduction to Ansible Ad-hoc Commands
uptime
free -m

Using Shell script run above 2 commands:
vi multi_task.sh
uptime
free -m
:wq

sh multi_task.sh

Ansible Ad-hoc Commands : Execute single tasks on Managed Nodes
Shell Script like playbook, you can exeute multiple tasks at a time.

Shell Module :
ansible db_server:web_server -m shell -a "uptime"

Lists all Modules :
ansible-doc -l
ansible-doc shell
ansible-doc -l | wc -l
3387 Modules

Transfer a file | copy a file to nodes  >> Copy Module
_______________________________________

ansible db_server -m copy -a "src=source/file/location dest=dest/location"

idempotent : If there are changes, then and only then file will be copied, otherwise CHANGED=FALSE
ansible group2 -m copy -a "content='Hi There\n' dest=/tmp/hello.txt backup=yes"

\n > Terminal will be coming to New Line

Downloading a file from Ansible Managed Nodes to Ansible Engine  > Fetch Module
______________________________________________________________
ansible db_server -m fetch -a "src=source/file/location/MNode dest=dest/location/Controller"

ansible 13.235.133.114 -m fetch -a "src=/home/ansadmin/demo.txt dest=./demo/"


13.235.133.114 | CHANGED => {
    "changed": true,
    "checksum": "85f2da7189901858923a65b5d36f309d01e434c2",
    "dest": "/home/ansadmin/my_ans_working_dir/demo/13.235.133.114/home/ansadmin/demo.txt",
    
 
To avoid above directory structure
ansible 13.235.133.114 -m fetch -a "src=/home/ansadmin/demo.txt dest=./newdemo/{{inventory_hostname}}_demo.txt flat=yes"


Create or Delete a file or directory on Managed Nodes  >   File Module
________________________________________________________

ansible 13.235.133.114 -m file -a "path=/home/ansadmin/helloo.txt state=touch"
ansible 13.235.133.114 -m file -a "path=/home/ansadmin/helloo.txt state=touch mode='0777'"
ansible 13.235.133.114 -m file -a "path=/home/ansadmin/helloo.txt state=absent"
ansible 13.235.133.114 -m file -a "path=/home/ansadmin/helloo state=directory"
ansible 13.235.133.114 -m file -a "path=/etc/hello.txt state=touch"        >> Permission Denied
ansible 13.235.133.114 -m file -a "path=/etc/hello.txt state=touch" -b     >> providing Root Privileges for ansadmin user

ansible db -m ping --list-host
ansible -h 

Different modules to work with files
____________________________________

https://docs.ansible.com/ansible/2.8/modules/list_of_files_modules.html

Install a package using yum module on Linux Managed Nodes
________________________________________________________

System : Linux > Module as yum
System : Ubuntu/Debian > Module as apt


ansible db -m yum -a "name=git state=present" -b
ansible db -m yum -a "name=httpd state=present" -b

state=present/absent/latest


Introduction to Ansible Default facts  >> setup Module
____________________________________

Ansible Facts/Variables are the information about your Managed Nodes like : OS , processor, python, release etc
Gathering Facts using setup modules >> Default in ansible Play Books

ansible 13.235.133.114 -m setup -a "filter=ansible_mounts"
ansible webservers -m setup -a "filter=ansible_date_time"

Ansible Facts >> Default and Custom

Create and Work with Ansible Custom Facts | Automation with Ansible Playbook  >>setup module
_____________________________________________________________________________
Get User Defined Facts
Every Week Git Version, HTTPD Version

ansible all -m shell -a "git --version"
ansible all -m shell -a "/usr/sbin/httpd --v"


Steps to create custom facts :
1. /etc/ansible/facts.d dir on Managed Node
2. .fact file inside facts.d
3. Output of the file should be json format 
4. Execution permission for the fact file


vi git_httpd_ver.fact

#!/bin/bash
git_version=$(git --version | awk '{print $3}')
httpd_version=$(/usr/sbin/httpd -version | awk 'NR==1 {print $3}')

cat << EOF
{ "GIT_VERSION" : "$git_version",
  "httpd_version" : "$httpd_version"
}
EOF

ansible group1 -m setup -a "filter=ansible_local"   >> Custom Facts are stored under ansible_local

Now Repeat the process for Managed Nodes

ansible 13.235.133.114 -m file -a "path=/etc/ansible/facts.d state=directory" -b
ansible 13.235.133.114 -m copy -a "src=/etc/ansible/facts.d/git_httpd_ver.fact dest=/etc/ansible/facts.d/git_httpd_ver.fact mode='0755'" -b
ansible group2 -m setup -a "filter=ansible_local"

Working with Ansible Dynamic Inventory
____________________________________
Static Inventory 
Dynamic Inventory : are scripts like shell/python for dynamic envs
Cloud is dynamic env
Ansible has dynamic inventory script for below enc
AWS EC2
Open Stack 
Google Compute Engine 
Space Walk
Jails etc...


raw module | How to mange the servers which are not installed with Python ?
___________________________________________________________________________

If you don't have python on managed nodes, then you can't use copy / fetch modules, you have to use raw modules

ansible data_center -m raw -a "uptime"
ansible data_center -m raw -a "scp "   >> Copy file to Managed Node



Ansible Variables
__________________

ansible all -m debug -a "var=inventory_hostname"
ansible all -m debug -a "var=inventory_hostname_short"
ansible all -m debug -a "var=groups.keys()"
ansible all -m debug -a "msg={{inventory_hostname}}"

[db]
localhost

[webservers]
15.206.174.164

[passwordauth]
15.206.174.165 ansible_ssh_user=xyz ansible_ssh_pass=xyz@123                                           >> Host Wise Vars (High Priority than Group Vars)

[webservers:vars]
ansible_ssh_user=xyz 
ansible_ssh_pass=xyz@123

[passwordauth:vars]
ansible_ssh_user=xyz 
ansible_ssh_pass=xyz@123

[all:vars]
ansible_ssh_user=xyz 
ansible_ssh_pass=xyz@123                                                                             >> Group Vars



Simple usage of debug module | Basics to write playbooks How to print message using Playbook >> Debug Module 
___________________________________________________________________________________________

Debug Module prints statements, vars, expressions

and accepts 3 parameters i.e. msg, var, verbosity

---
 - hosts: group2
   tasks:
   - debug: msg="Welcome to Ansible Playbook"
   
   
---
 - name: The Sample Play Book
   hosts: group2
   tasks:
   - name: Print the Message
     debug:
      msg:
      - "Welcome to Ansible Playbook"
      - "These are the basis Concepts"
      - "Discuss Advanced Concepts"
      
      
      
#!/bin/ansible-playbook
 - name: Usage of debug Module
   hosts: group2
   tasks:
   - name: printing a var value using debug module
     debug:
      msg: "This is the hostname : {{inventory_hostname}}"
     
     
#!/bin/ansible-playbook
 - name: Usage of debug Module
   hosts: all
   tasks:
   - name: printing a var value using debug module
     debug:
#     msg: "This is the hostname : {{inventory_hostname}}"
      var: inventory_hostname
      
ansible-playbook verbosity_usage.yml -vv
   
---
 - name: Usage of verbosity
   hosts: group2
   tasks:
   - name: Default Verbosity is zero
     debug:
      msg: "this is  default message"
      verbosity: 0
   - name: Verbosity is 2
     debug:
      msg: "With Verbosity"
      verbosity: 2

---
 - name: Play Name Goes Here
   hosts: localhost
   tasks:
   - name: Task 1 Name Goes Here
     debug:
      msg:
      - "Sample Line 1"
      verbosity: 0
   - name: Tsak 2 Name Goes Here
     debug:
      msg:
      - "Sample Line 2"
      verbosity: 2
      
      
      
      
---
 - hosts: localhost
   var:
    x: 4
    my_name: 'sachin'
    my_num: 12.32
    my_b: yes
   tasks:
   - debug: 
      msg: 
       - "Value of x is {{x}} and type is {{x|type_debug}}"
       - "Value of my_name is {{my_name}} and type is {{my_name|type_debug}}"
       - "Value of my_num is {{my_num}} and type is {{my_num|type_debug}}"
       - "Value of my_b is {{my_b}} and type is {{my_b|type_debug}}"




ansible-playbook print_any_msg.yml --syntax-check

which ansible-playbook
./copyfile.yml -vvvvvvvvv
./copyfile.yml --syntax-check
./copyfile.yml -check    >> Dry Run



Data Structures :Scaler,Sequence ,Map
---
 - hosts: localhost
   vars: 
    #pkgs: ['vim','wget','nano','httpd']
    pkgs:
     - 'vim'
     - 'wget'
     - 'nano'
     - 'httpd'
    #dist: {'linux':'httpd', 'ubuntu':'apache2'}
    dist:
     'linux': 'httpd'
     'ubuntu': 'apache2'
   tasks:
   - debug: var=dist

How to read and print a variable value using ansible playbook ? | DevOps
________________________________________________________________________


---
 - hosts: group2
   vars:
    x: 45
    my_name: Sachin
   gather_facts: false
   tasks:
   - debug:
      msg:
       - "The x value is {{x}}"
       - "Name is {{my_name}}"


---
 - hosts: group2
   vars:
    x: 45
    my_name: Sachin
   vars_prompt:
    - name: username
      prompt: Enter your username
      private: no
    - name: password
      prompt: Enter your password
      private: yes
   gather_facts: false
   tasks:
   - debug:
      msg: "Your username is {{username}} and password is {{password}}"
      
      
      
     
     
     
How to read variable values from yml and json     
     
---
 x: 4
 y: 
  - 23
  - 24
  - 'ansible'
 pkgs: {'linux': 'httpd','ubuntu': 'apache2'}



---
{
   "x": 20,
   "y": [1,2,3,4,5],
   "r": {"one":1,"two":2,"three":3}
}


---
 - hosts: localhost
   vars_files: 
   - vars_values.yml
   - vars_values.json
   tasks:
   - debug: var=pkgs



     
      
      
      
One playbook to install any package | command line arguments  
____________________________________________________________

CLA as Scaler --extra-var
ansible-playbook cmd_line.yml -e "x=20"
ansible-playbook cmd_line.yml -e "x=20 y=30"
ansible-playbook cmd_line.yml -e "x=20 y='Ansible Demo'"
ansible-playbook cmd_line.yml -e "{'x':20 , 'y':30}"

as Sequence 
ansible-playbook cmd_line.yml -e "{'x':[1,2,3],'y':[3,4,5]}"

as Map
ansible-playbook cmd_line.yml -e "{'x': {'one':1,'Two':2} ,'y':[3,4,5]}"

as file
ansible-playbook cmd_line.yml -e "@var_vals.yml"
cmd_line.yml
---
 - hosts: group2
   gather_facts: false
   tasks:
   - debug:
      msg:
       - "The x value is {{x}}"
       - "The y value is {{y}}"
       
       
var_vals.yml
---
 x: 45
 y:
  - 4



Example CLA
vi install_uninstall.yml
---
 - name: This is the simple play to install and uninstall packages
   hosts: localhost
   gather_facts: false
   become: yes
   tasks:
   - name: TO Insatll and UnInstall {{pkg}}
     yum:
      name: "{{pkg}}"
      state: "{{req_state}}"

ansible-playbook install_uninstall.yml -e "pkg=nginx req_state=present"




---
 - hosts: localhost
   gather_facts: fales
   become: yes
   tasks: 
   - shell: "cat /etc/os-release | awk -F = 'NR==1 {print $2}' | tr '\"' ' '"
     register: os_dist
   - shell: "uname"
     register: os_name
   - debug:
      msg: 
       - "OS Distribution is {{os_dist}}"
       - "OS Release is {{os_name}}"
       
ansible localhost -m setup | grep ansible      
ansible localhost -m setup >> debug : var=ansible_facts


---
 - hosts: localhost
   #gather_facts: yes
   tasks:
   - debug:
      msg:
       - "ansible_distribution is {{ansible_distribution}}"
       - "ansible_python_version is {{ansible_python_version}}"
       - "ansible_system is {{ansible_system}}"
       - "ansible_user_shell is {{ansible_user_shell}}"
       
      
      
Arithemetic Operators >> Jinja Syntax

---
 - hosts: localhost
   gather_facts: no
   vars:
    x: 40
    y: 20
   tasks: 
   - debug:
      msg:
      - "The value of x is {{x}}"
      - "The value of y is {{y}}"
      - "The value of {{x}} + {{y}} is {{x+y}}"
      - "The value of {{x}} - {{y}} is {{x-y}}"
      - "The value of {{x}} * {{y}} is {{x*y}}"
      - "The value of {{x}} / {{y}} is {{x/y}}"
      - "The value of {{x}} % {{y}} is {{x%y}}"
      
       
---
 - hosts: localhost
   gather_facts: no
   vars_prompt:
    - name: x
      prompt: Enter value of x
      private: no
    - name: y
      prompt: Enter value of y
      private: no
   tasks: 
   - debug:
      msg: 
      - "The value of x is {{x}} and type is {{x|type_debug}}"
      - "The value of y is {{y}} and type is {{y|type_debug}}"
      - "The value of {{x}} + {{y}} is {{x|int + y|int}}"
      


---
 - hosts: localhost
   gather_facts: no
   vars_files:
    - my_vars.yml
   tasks: 
   - debug:
      msg: 
      - "The value of x is {{x}} and type is {{x|type_debug}}"
      - "The value of y is {{y}} and type is {{y|type_debug}}"
      - "The value of {{x}} + {{y}} is {{x|int + y|int}}"


---
 x: 4
 y: 10
 
 
 
ansible-playbook myprompt.yml -e "x=50 y=20"
---
 - hosts: localhost
   gather_facts: no
   tasks:
   - debug:
      msg:
      - "The value of x is {{x}} and type is {{x|type_debug}}"
      - "The value of y is {{y}} and type is {{y|type_debug}}"
      - "The value of {{x}} + {{y}} is {{x|int + y|int}}"
      
      
      
---
 - hosts: localhost
   gather_facts: false 
   vars:
    x: "This is SAMPLE MessAge"
    y: "30"
    z: [2,3,4,5,6,90,21,11]
   tasks:
   - debug:
      msg:
      - "{{x.lower()}}"
      - "{{x.upper()}}"
      - "{{x.title()}}"
      - "{{x|lower}}"
      - "{{x|title}}"
      - "{{y|int}}"
      - "{{z|min}}"
      - "{{z|max}}"




Comparision Operators

---
 - hosts: localhost
   gather_facts: false 
   vars: 
    x: 10
    y: 20
   tasks:
   - debug:
      msg:
      - "{{x}} == {{y}} : {{x==y}}"
      - "{{x}} != {{y}} : {{x!=y}}"
      - "{{x}} > {{y}} : {{x>y}}"
      - "{{x}} >= {{y}} : {{x>=y}}"
      - "{{x}} < {{y}} : {{x<y}}"
      - "{{x}} > {{y}} : {{x>y}}"
 



Membership Oprs:

---
 - hosts: localhost
   gather_facts: false 
   vars:
    x: [12,22,33,44,55]
    y: 33
   tasks:
   - debug:
      msg:
      - "y in x : {{y in x}}"
      - "y not in x : {{y not in x}}"
      
      
      
Test Oprs : is defined,is undefined, is lower, is upper, is even, is odd, is divisiblby, is file, is directory, is file,is number 


---
 - hosts: localhost
   gather_facts: false 
   vars:
    x: 10
    y: 20
   tasks:
   - debug:
      msg:
      - "The value of x is {{x}}"
      - "The value of y is {{y}}"
     when: x > y
     
---
 - hosts: localhost
   gather_facts: yes
   tasks:
   - apt: name=apache2 state=present
     when: ansible_distribution == 'Ubuntu'
   - yum: name=httpd state=present
     when: ansible_distribution != 'Ubuntu'
     
     
     
     
---
 - hosts: localhost
   gather_facts: false 
   vars:
    x: 10
    y: 15
   tasks:
   - debug:
      msg:
      - "the larger of {{x}} and {{y}} is {{ x if (x > y) else (y)}}"
      
      
      
      
Handlers :       
---
 - hosts: localhost
   gather_facts: false 
   tasks:
   - yum: name=httpd state=present
     register: out
   - debug: var=out.register
     when: out.changed==true


---
 - hosts: localhost
   gather_facts: true
   tasks:
   - yum: name=httpd state=present
     register: out
     notify: start httpd
   handlers:
   - name: start httpd
     service: name=httpd state=started   
     
     
     
Loops:
 
 ---
 - hosts: localhost
   gather_facts: false 
   tasks:
   - debug
      msg: "Pkg under execution is {{item}}"
     loop:
      - Pkg_1
      - Pkg_2
      - Pkg_3
      - Pkg_4
      - Pkg_5
  
  
  
  ---
 - hosts: localhost
   gather_facts: false 
   tasks:
   - yum: name={{item}} state=present
     loop:
      - Pkg_1
      - Pkg_2
      - Pkg_3
      - Pkg_4
      - Pkg_5


---
 - hosts: localhost
   gather_facts: false 
   tasks:
   - debug:
      msg: "Executing first task"
     tags:
      - first
      - common 
   - debug:
      msg: "Executing Second task"
     tags:
      - second
   - debug:
      msg: "Executing third task"
     tags:
      - third
      - common
   - debug:
      msg: "Executing fourth task"
     tags:
      - fourth     
   - debug:
      msg: "Executing fifth task"
     tags:
      - fifth

 ansible-playbook mul_tasks.yml --tags common
 ansible-playbook mul_tasks.yml --skip-tags common
 ansible-playbook mul_tasks.yml --list-tags
 
 never tag >>  By default never execute any task
 always tag >>  always execute that task

Error handling with block rescue concepts  >> Yum and Service Modules, Command
________________________________________
ignore_errors: true  


---
 - hosts: localhost
   gather_facts: false 
   become: yes
   tasks:
   - service: name=nginx state=started
     ignore_errors: yes
   - service: name=httpd state=started
   

---
 - hosts: localhost
   gather_facts: false 
   become: yes
   tasks:
   - yum: name=httpd state=present
     register: out
     failed_when: out.rc==0
   
   
---
 - hosts: localhost
   gather_facts: false
   tasks:
     - command: "ls /home/ansadmin/my_ans_working_dir/mydir1"
       register: mydir1_out
     - debug: var=mydir1_out
     - command: "ls /home/ansadmin/my_ans_working_dir/mydir4"
       register: mydir4_out
       ignore_errors: yes     
     - debug: var=mydir4_out
     - command: "ls /home/ansadmin/my_ans_working_dir/mydir3"
       register: mydir3_out
     - debug: var=mydir3_out

---
- hosts: localhost
  tasks:
    - debug: var=ansible_os_family
    
    
    
---
- hosts: group3
  tasks:
    - block: 
      - name: Installing httpd RedHat OS 
        yum:
          name: httpd
          state: present
      - name: Starting httpd RedHat OS
        service:
          name: httpd
          state: started
      when: ansible_os_family=="RedHat"      
      become: yes
    - debug: var=ansible_os_family    



---
- hosts: localhost
  tasks:
    - block:
      - name: Finding Files
        command: "ls /home/ansadmin/my_ans_working_dir/mydir1"
        register: mydir1_out
      rescue:
        - debug: 
           msg: "The given path is not a valid path"
      always:
        - debug: 
           msg: "This will always execute"


Ansible reusable concept with import and include
______________________________________________________

--- 
 - name: Simple Play To Install Mul Packages
   hosts: group3
   gather_facts: true
   become: yes
   tasks:
     - import_tasks: install_webserver_RedHat.yml
       when: ansible_os_family=="RedHat"
     - import_tasks: install_java_RedHat.yml
       when: ansible_os_family=="RedHat" 
       
       
install_java_RedHat.yml       
---
 - name: Insalling Java on RedHat Family
   yum:
     name: java-1.8.0-openjdk
     state: present
       
 install_webserver_RedHat.yml  
 
 ---
 - name: Insalling WebServer on RedHat Family
   yum:
    name: httpd
    state: present


import_tasks are static : If we have dynamic vars like ansible_os_family, it will NOT be resolved
All Import * are preprocessed at the playbooks are parsed

include_tasks are dynamic : If we have dynamic vars like ansible_os_family, it will  be resolved  
All Include * are processed at the time of execution of playbook  


Ansible has following modules for Import and Include
import_playbook import_tasks import_vars import_roles
include.....


Delegate to : expicitly mention on which server we want to execute the particular task even if hosts: all (used with run_once: true)
Local_action : will run on localhost only

---
 - hosts: all
   gather_facts: True
   become: false 
   tasks:
   - name: 
     shell: "uptime"
     register: out_uptime
   - debug:
      msg: cc  
   - file:
      dest: ./discovery.csv
      state: absent
     delegate_to: localhost
     run_once: true
   - copy:
      dest: ./discovery.csv
      content: "ansible_system, ansible_distribution, ansible_product_version, uptime\n"
     delegate_to: localhost
     run_once: true
   - lineinfile:
      path: ./discovery.csv
      line: "{{ansible_system}}, {{ansible_distribution}}, {{ansible_product_version}}, {{out_uptime.stdout.split(',')[0]}}"  
     delegate_to: localhost 


Template Module :is used to copy a file from ansiblle engine to Managed Nodes with some dynamic data 
Copy Module >> For Static Files
Template Module >> Dynamic Data (Source is j2 file jinja file)

Useful Command
find . -iname index.html


---
 - hosts: all
   gather_facts: false 
   become: yes
   tasks:
   - yum: name=httpd state=present
   - template: src=index.html dest=/usr/share/httpd/noindex/index.html 
   - service: name=httpd state=started
   
   
   
   
---
 - hosts: localhost
   gather_facts: no
   tasks:
   - ec2:
       instance_type: t2.micro
       image: ami-06a0b4e3b7eb7a300
       region: ap-south-1
      
pip3 install boto boto3 --user
pip3 install awscli --user       


Multi SGs
---
 - hosts: localhost
   gather_facts: no
   tasks:
   - ec2:
       instance_type: t2.micro
       image: ami-06a0b4e3b7eb7a300
       count: 1
       region: ap-south-1
       key_name: Test_Asus  
       group: ['launch-wizard-3','launch-wizard-2']
       wait: yes
       instance_tags: 
         Name: Test
         Env: Dev
       
       
 ---
 - hosts: localhost
   gather_facts: no
   connection: local
   tasks:
   - ec2:
       instacne_id: 
       region: ap-south-1
       state: running
       wait: yes
     tags:
      - start
      - never
   - ec2:
       instacne_id: 
       region: ap-south-1
       state: stopped 
       wait: yes
       tags:
         - stop
         - never
   - ec2:
       instacne_id: 
       region: ap-south-1
       state: absent
       wait: yes
       tags:
         - term
         - never
      
       
 ec2_instance_facts : with for loop  
 
 
 
ansible-vault encrypt myfile.yml
EnterPassword: 
ansible-playbook myfile.yml --ask-vault-pass
ProvidePassword:
   

---
 - hosts: localhost
   gather_facts: no
   connection: local
   vars_file: aws_keys.yml
   tasks:
   - ec2:
       instance_type: t2.micro
       image:
       count: 1
       region: ap-south-1
       key_name: 
       group: ['launch-wizard-3']
       wait: yes
       instance_tags: 
         Name: Test
         Env: Dev
       aws_access_key: {{aws_access_key}} 
       aws_secret_key: {{aws_secret_key}}




 ansible-vault encrypt aws_keys.yml
 ansible-playbook myfile.yml --ask-vault-pass
 
 ansible-vault encrypt aws_keys.yml
 ansible-playbook myfile.yml --ask-vault-pass
 ansible-vault create myfile.yml
 ansible-vault view myfile.yml
 ansible-vault edit myfile.yml
 ansible-vault rekey myfile.yml
 ansible-playbook myfile.yml --vault-password-file mypass
 same as ansible-playbook myfile.yml --vault-id mypass
 

Java, Tomcat Installation and Configuration using Playbook  >> Template Module
________________________________________________________________

alternatives --config java

---
 - name: Install and Configure tomcat
   hosts: 13.232.188.147
   gather_facts: false
   become: yes
   tasks:
     - name: Setting Default Java
       alternatives: 
         name: java
         link: /usr/bin/java
         path: /usr/lib/jvm/jre-1.8.0-openjdk/bin/java
         
         
---
 - name: Install and Configure tomcat
   hosts: 13.232.188.147
   gather_facts: false
   vars: 
     req_java: java-1.8.0-openjdk
   become: yes
   tasks:
     - name: Updating Repos
       yum: 
         name: "*"
         state: latest
     - name: Installing Required Java
       yum: 
         name: {{"req_java"}}
         state: present    
       



---
 - name: Install and Configure tomcat
   hosts: 13.232.188.147
   gather_facts: false
   become: yes
   tasks:
     - name: Setting Default Java
       alternatives: 
         name: java
         link: /usr/bin/java
         path: /usr/lib/jvm/jre-1.8.0-openjdk/bin/java




---
 - name: Install and Configure tomcat
   hosts: 13.232.188.147
   gather_facts: false
   vars: 
     req_java: java-1.8.0-openjdk
     req_tomcat: 9.0.41
     tomcat_url: https://mirrors.estointernet.in/apache/tomcat/tomcat-{{req_tomcat.split('.')[0]}}/v{{req_tomcat}}/bin/apache-tomcat-{{req_tomcat}}.tar.gz
   become: yes
   tasks:
     - name: Downloading Required Tomcat
       get_url:
         url: "{{tomcat_url}}"
         dest: /usr/local


---
 - name: Install and Configure tomcat
   hosts: 13.232.188.147
   gather_facts: false
   vars: 
     req_java: java-1.8.0-openjdk
     req_tomcat: 9.0.41
     tomcat_url: https://mirrors.estointernet.in/apache/tomcat/tomcat-{{req_tomcat.split('.')[0]}}/v{{req_tomcat}}/bin/apache-tomcat-{{req_tomcat}}.tar.gz
   tasks:
     - name: Downloading Required Tomcat
       debug: var=tomcat_url         




---
 - name: Install and Configure tomcat
   hosts: 13.232.188.147
   gather_facts: false
   vars: 
     req_java: java-1.8.0-openjdk
     req_tomcat: 9.0.41
     tomcat_url: https://mirrors.estointernet.in/apache/tomcat/tomcat-{{req_tomcat.split('.')[0]}}/v{{req_tomcat}}/bin/apache-tomcat-{{req_tomcat}}.tar.gz
   become: yes
   tasks:
     - name: Extract Tomcat
       unarchive: 
         src: "/usr/local/apache-tomcat-{{req_tomcat}}.tar.gz"       
         dest: /usr/local
         remote_src: yes



---
 - name: Install and Configure tomcat
   hosts: 13.232.188.147
   gather_facts: false
   vars: 
     req_java: java-1.8.0-openjdk
     req_tomcat: 9.0.41
     tomcat_url: https://mirrors.estointernet.in/apache/tomcat/tomcat-{{req_tomcat.split('.')[0]}}/v{{req_tomcat}}/bin/apache-tomcat-{{req_tomcat}}.tar.gz
   become: yes
   tasks:
     - name: Renaming Tomcat 
       command: mv /usr/local/apache-tomcat-{{req_tomcat}} /usr/local/latest  
         
---
 - name: Install and Configure tomcat
   hosts: 13.232.188.147
   gather_facts: false
   vars: 
     req_java: java-1.8.0-openjdk
     req_tomcat: 9.0.41
     tomcat_url: https://mirrors.estointernet.in/apache/tomcat/tomcat-{{req_tomcat.split('.')[0]}}/v{{req_tomcat}}/bin/apache-tomcat-{{req_tomcat}}.tar.gz
     tomcat_port: 8090
   become: yes
   tasks:
     - name: Replacing Tomcat Port 
       template:
         src: server.xml.j2
         dest: /usr/local/latest/conf/server.xml 

---
 - name: Install and Configure tomcat
   hosts: 13.232.188.147
   gather_facts: false
   vars: 
     req_java: java-1.8.0-openjdk
     req_tomcat: 9.0.41
     tomcat_url: https://mirrors.estointernet.in/apache/tomcat/tomcat-{{req_tomcat.split('.')[0]}}/v{{req_tomcat}}/bin/apache-tomcat-{{req_tomcat}}.tar.gz
     tomcat_port: 8090
   become: yes
   tasks:
     - name: Staring Tomcat Port 
       shell: nohup /usr/local/latest/bin/startup.sh &         
         
         
         

Introduction AWS Provisioning using Ansible |Environment setup for Ansible to work with AWS Cloud
________________________________________________________________________________________________

pip3 install awscli --user
aws configure

---
 - name: Sample Play to launch EC2
   hosts: localhost
   connection: local
   gather_facts: false
   tasks:
      - name: Simple Tasks to Launch EC2 Instance
        ec2: 
          instance_type: t2.micro
          image: ami-04b1ddd35fd71475a
          region: ap-south-1



Ansible - Vault | Protect your sensitive data using Ansible Vault Concept
____________________________________________________________________________

ansible-vault encrypt launch-ec2.yml
ansible-playbook launch-ec2.yml --ask-vault-pass
ansible-vault decrypt launch-ec2.yml
ansible-vault create launch-ec2.yml
ansible-vault view launch-ec2.yml
ansible-vault edit launch-ec2.yml
ansible-vault rekey launch-ec2.yml
ansible-playbook launch-ec2.yml --vault-password-file mypass
ansible-playbook launch-ec2.yml --vault-id mypass


---
 - name: Sample Play to launch EC2
   hosts: localhost
   connection: local
   gather_facts: false
   vars_files: aws-keys.yml
   tasks:
      - name: Simple Tasks to Launch EC2 Instance
        ec2: 
          instance_type: t2.micro
          image: ami-04b1ddd35fd71475a
          region: ap-south-1
          aws_access_key: "{{aws_access_key}}"
          aws_secret_key: "{{aws_secret_key}}"


































 
 ---
 - hosts: group2
   gather_facts: false
   tasks:
   - debug:
      msg:
       - "The x value is {{x}}"
       
       
       

  - 67
       

 
 
 
 
 
 
 
 
 
 
 







NOPASSWD : ALL
No need to provide any pwd while running your ansible adhoc command with Root Privileges from your ansadmin user






Fetch File from Host 
>> ansible 13.232.222.133 -m fetch -a "src=/home/ansadmin/demo.txt dest=./{{inventory_hostname}}_demo.txt flat=yes"
flat=yes : No extra dir structure will be created otherwise host dir structure


Create a file hello.txt under tmp location: 
ansible 13.232.222.133 -m file -a "path=/tmp/hello.txt state=touch"
ansible 13.232.222.133 -m file -a "path=/tmp/newhello.txt state=touch mode='777'"

Remove a file 
ansible 13.232.222.133 -m file -a "path=/tmp/newhello.txt state=absent"
ansible 13.232.222.133 -m file -a "path=/tmp/hello state=directory"

With Root Privileges -b
ansible 13.232.222.133 -m file -a "path=/etc/demo.txt state=touch" -b
ansible group3 -m ping --list-hosts


Files Modules in Ansible 
https://docs.ansible.com/ansible/2.8/modules/list_of_files_modules.html

Install Git on Hosts with Root Privileges :
ansible 13.232.222.133 -m yum -a "name=git state=present" -b
ansible 13.232.222.133 -m yum -a "name=httpd state=present" -b

Gathering Facts :
The task of collecting remote system information is called Gathering Facts
Collected/ Gathered Information is called Facts or Variables
You can collect facts using Setup Modules in adhoc commands

Ansible Playbooks : By Default call Setup Module to gather facts tasks


Syntax :
Ansible group_of_servers -m setup
ansible 13.232.222.133 -m setup -a "filter=ansible_mounts"


Facts : Information about your managed nodes : 2 Types:
Default Facts
Custome Facts

Sample Playbook 
---
 - name: The Sample Name
   hosts: all
   tasks:
   - name: Default Verbosity
     debug:
      msg: "this is default msg"
      verbosity: 0
   - name: Verbosity is 2
     debug:
      msg: "Verbo is 2"
      verbosity: 2



Sample Playbook

---
 - name: Sample Name
   hosts: 65.0.96.120
   tasks:
   - name: Print a message
     debug:
      msg:
       -  "Sample Playbook"
       -  "Message 2"
       -  "Message 3"


#   - debug: msg="This is sample playbook"


Sample Playbook
!/bin/ansible-playbook
 - name: Usage of debug module
   hosts: all
   tasks:
   - name: print a var using debug module
     debug:
#      msg: "The host name is : {{inventory_hostname}}"
       var: inventory_hostname
       
       
How to read and print a variable value using ansible playbook
---
 - hosts: localhost
   vars:
    x: 45
    my_name: "Sachin"
   vars_prompt:
    name: y
    prompt: Enter the value for y
    private: false
   gather_facts: false
   tasks:
   - debug:
      msg:
       - "The x value is : {{x}}"
       - "The my_name is : {{my_name}}"
       - "The value of y is {{y}}"
       
       
       
       
       
Command Line Args       
ansible-playbook cmd-line-args.yml -e "x=10"   

---
 - hosts: localhost
   gather_facts: false
   tasks:
   - debug: var=x
   
   
   We can pass different type of variables in different formats:
   Scaler, Sequence, Map
   
   
   Scaler
   ansible-playbook cmd-line-args.yml -e "x=10 y=50"
   ansible-playbook cmd-line-args.yml -e "{'x':10,'y':20}"
   ansible-playbook cmd-line-args.yml -e "x=10 y='The Sample Y Value'"
   
   Sequence
   ansible-playbook cmd-line-args.yml -e "{'x': [1,2,3,4],'y': 10}"
   
   Map 
   ansible-playbook cmd-line-args.yml -e "{'x': {'one': 1, 'two': 2},'y':20}"
   
   
   
   
   Passing Values in file :
   ansible-playbook cmd-line-args.yml -e "@var_values.yml"
   
---
 x: 45
 y:
  - 4
  - 67
  - "ansible"


Installing Packages :

ansible-playbook install_uninstall.yml -e "pkg=httpd req_state=present"
---
 - hosts: localhost
   gather_facts: false
   become: yes
   tasks:
   - yum:
      name: "{{pkg}}"
      state: "{{req_state}}"
      
VS Code Editor Installation      
      
step1: Import Microsoft GPG key
   sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
step2: create the following repo file to enable the Visual Studio Code repository
   sudo nano /etc/yum.repos.d/vscode.repo
   
   Paste the following content into the file:

[code]
name=Visual Studio Code
baseurl=https://packages.microsoft.com/yumrepos/vscode
enabled=1
gpgcheck=1
gpgkey=https://packages.microsoft.com/keys/microsoft.asc

step3: Install vs code
   sudo yum install code

step4:   Launch visual studio code using termainal
   code .
step5: Add Required Extensions
   ansible extention/plugin



ignore_errors: yes

---
 - hosts: localhost
   gather_facts: false
   tasks:
     - block:
        - command: "ls /home/ansadmin/dir1" 
          register: out_dir1
        - command: "ls /home/ansadmin/dir2" 
          register: out_dir2
        - command: "ls /home/ansadmin/dir3" 
          register: out_dir3
       ignore_errors: yes

     - debug: var=out_dir1 
     - debug: var=out_dir2
     - debug: var=out_dir3
      
      
      




       

       
       








             
             
