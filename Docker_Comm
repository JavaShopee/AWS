Docker Commands

+++++++++++++++++++++++++++++++++++++++
docker info 

sudo usermod -a -G docker $USER

--Execute the image--
docker container run hello-world
docker run hello-world

--Execute the nginx image and publish on host port--
docker container run --publish 8080:80 nginx

--Detach Mode--
docker container run --publish 80:80 -d nginx

docker container ls
docker ps

Google-----stop all running containers
docker stop $(docker ps -aq)
Google-----Remove all containers
docker rm $(docker ps -aq)
Google-----Remove all images
docker rmi $(docker images -q)


--Build image from docker file--
docker build -f <path of docker file>

--Docker File--
-From :Sets the base image to run subsequent ins
-Label: Metadata like version, vendor
-run :Execute specific set of commands
-workdir : pwd
-volume:expose any db storage, file/folder created by docker container, conf files
-Expose: port
-ENV :Env var
-ADD : ADD /home /mydir
-CMD : Run the software contained by your image

sudo systemctl start jenkins
sudo systemctl enable jenkins
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post
sudo usermod -a -G docker jenkins
systemctl restart jenkins

docker container stop <container name/container id>
docker container start <container name/container id>
--running containers--
docker container ls
--all containers--
docker container ls -a
docker ps

--name the container--
docker container run -p 8080:80 --name mycont -d nginx
--logs of running container--
docker container logs <cid>
--Processed inside container--
docker container top <cid>
--Remove Stopped Container--
docker container rm <cid>
--Remove Running Container--
docker conatiner stop <cid>
docker conatiner rm <cid>
OR
docker container rm -f <cid>


docker container run -p 3306:3306 --name myql --env MYSQL_RANDOM_ROOT_PASSWORD=yes -d mysql
docker container logs myql


--conf details of container--
docker container inspect <cid>
--Performace Stats--
docker container stats

--Start new conatiner in interactive mode--
docker container run -it --name myngcont nginx bash
--Inside the running conatiner interactive mode--
docker container exec -it myql bash
--Download ubuntu image and run the container in interactive mode--
docker container run -it ubuntu bash

apt-get update
apt get install curl
curl https://www.facebook.com
docker container port <cid>

--By default each container is connect to vpn called bridge--
docker network ls
docker network inspect <nid>
--Create Network on Bridge Driver--
docker network create my_network  --default bridge--
docker network create -d bridge subnetwk
--Attach already running container to network--
docker network connect <nid> <cid>
docker network -f driver=bridge
docker container run -d --name mynginxcontainer --network mynetwork nginx
docker network disconnect <nid> <cid>



--IP addr for container--
docker container inspect -f "{{.NetworkSettings.IPAddress}}" optimistic_einstein
docker network ls --format "{{.ID}}:{{.Driver}}"


--containers on same network--
--conatiners use their names as DNS to communicate--
docker container exec -it myngnx1 ping myngnx2
docker container exec -it myngnx2 ping myngnx1

--List all images--
docker images

--Each image is series of layer , docker uses Union File System to combine all layers into a single image--
--see series of layer
docker history <image name>


docker inspect network <nid> 
docker inspect container <cid>
docker inspect <image name>

--Image tagging--

docker image tag source_image:tag target:tag
docker image tag mysql sacharora99/mytestsql:latest
docker login
docker image push sacharora99/mytestsql:latest
docker logout

docker build -f <path_of_docekr_file>
docker build -t imageName:tagName dir

--volume in docker file is physical location on machine--
--where container will execute--

Persitance Data Problem::
Data will not exists when container is stopped. It will start the new data generation

We can start existing container or new container with existing volume >> Resolved Persitance Data Problem

docker volume ls
docker container run -d --name mysqldb3 --mount source=mysample-volume-name,target=/var/lib/mysql mysql:latest

source=mysample-volume-name : it can be new volums or existing vol
target=/var/lib/mysql  : Where container will xcute



--Bind Mounts--
--map container dir to host machine dir--
--we can exeute new code without stopping the running container--
--BM are not present inside dockerfile, volumes are present--
--Non Dcoker process can execc the file nside the running conatiner--


docker container run -d --mount type=bind,source=$(pwd),target=/app nginx
source: map from
target : map to 


------Docker Compose--
sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose 
docker-compose â€“version

--provide custom name to docker compose file--
docker-compose -f xxx.yml

--save file and run via command--
docker-compose up -d
docker-compose down
docker-compose -f xxx.yml up -d


--Docker Swarm--Clustering and Scheduling tool for containers--native suuport of docker--
--Scaling up the conatiners as per the load--
--Recreate the continers in case of failure--
--Upgrade the service with zero downtime--
--Dfine nodes Services/Replicas--
--Swarm takes mutltiple docker engines running on different host machines and let them use together--
--Manager Leader node--Worker Node--
--Raft Algo--Leader node is constantly checking with fellow node and synching their state with fellow nodes--

--Task Schedulig--If anyhow service goes down, spin up the new containers with same config
--Load Balancing--Ingres Load Balancing
--Rolling Updates--8 containers with older functionaliyt, 2 with upgrded patches--
--Submit the service def to manager node, manager node dispatches unit of work called tasks to worker nodes--



docker swarm init 
docker service --help
docker service create <image> <command>
docker service create alpine ping www.google.com
docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
dapn6gfcd1di        charming_shamir     replicated          1/1                 alpine:latest   

docker service inspect charming_shamir     

Which container is  running the particular service ?
docker service ls
docker service ps <sid>
docker service update <service name> --replicas <Number of service>

New Service --> New Container
New Replica of Service--> New Containers

If any of the container goes down, it will auto start the new replica

docker swarm join-token manager
It will issue token to paste on nodes
docker nodes ls

Default N/W driver for containers is Bridge
Docker Swarm Network Driver is overlay network
overlay network : Container communication within single swarm
When we initailize D Swarm or add new host to existing swarm, it will create 2 default n/ws
Ingress Overlay Nw
Bridge NW: docker_gwbridge : Node to Node communication
Ingress overlay network : Container communication within single swarm

docker network ls
docker network create -d overlay <network name>

docker network create -d overlay my_overlay
docker service create <image name> --relpicas 7 --network my_overlay ping www.google.com


docker service create --name postgress --network my_overlay -e POSTGRES_PASSWORD=mypassword postgres
docker service create --name mydrup --network my_overlay -p 80:80 drupal

Routing Mesh : Global Traffic mgt of docker swarm -- Same service can be accessed on all nodes in cluster --Ingrsee Routing Mesh


docker network create -d overlay front_end_mynet
docker network create -d overlay back_end_mynet
docker service create --name voting_app -p 5000:80 --replicas 5 --network front_end_mynet dockersamples/examplevotingapp_vote:before
docker service create --name rediss_app --replicas 2 redis:3.2
docker service create --name worker_app --network front_end_mynet dockersamples/examplevotingapp_worker:latest
docker service create --name postgres_app --mount type=volume,source=db-data,target=/var/lib/postgressql/data postgres:9.4
docker service create --name result_app  -p 5001:80 --network back_end_mynet dockersamples/examplevotingapp_result:before
https://medium.com/@khandelwal12nidhi/ci-cd-with-jenkins-and-ansible-e9163d4a6e82


Docker Stack : Group of interrelated services that share common dependencies and can be scaled or orchestrated togther.
docker-stack.yml file



Depoly the service in Docker Swarm
docker stack deploy -c docker-compose.yml <stack name>
dcoker service ls

List Stack Service:
docker stack services <service name>
docker service ps <service name>  : List down all containers on all nodes



docker node ls
docker service ls
docker stack deploy -c docker-compose.yml <stack name>

List Stacks running in a swarm
docker swarm ls

List Tasks running in a stack 
docker stack ps <stack name>

List of replicas running in a service 
docker service <stack name>


Create Secret in Docker
docker secret create <secret name> <file name>
echo "Secret Value" | docker secret create secret_name -

docker service create --name postgress --secret db_username --secret db_password -e POSTGRES_PASSWORD_FILE=/run/secret/db_password -e POSTGRES_USER_FILE=/run/secret/de_username postgres


Scale Up the servcie horizontally :
increase containers, replicas
Scale Up the servcie verticaly:
increase ram, cpu



docker service update <service name> --replicas 10
docker service scale <service name> = <num of replicas>

Upgrade nginx image version
docker service update --image nginx:1.15.12 web_server : rolling upgrade
docker service update --publish-rm 8080 --publish-add 9090 <servicie name>
