Creating 3D array from 2D array :

from numpy import *
arr=array([
        [1,2,3,5,6,7],
        [4,5,6,3,2,3]
          ])
arr2 = arr.flatten()
arr3 = arr.reshape(3,4)

print(arr2)       
print(arr3)  

'''
   ndim  : Num of Dim    flatten()   :Into 1D array
   shape : 3,4           reshape(3,4) : into 2D array
   size  : Total Elements
'''

Matrix
from numpy import *

arr=array([
        [1,2,3,5,6,7],
        [4,5,6,3,2,3]
          ])

m  = matrix(arr)
print(m)


Addition/ Multiplication of 2 matrix:
from numpy import *

arr=array([
        [1,2,3,5,6,7],
        [4,5,6,3,2,3]
          ])

m1 = matrix('1,2,3;3,4,5;4,5,6')
m2 = matrix('10,2,30;30,40,50;40,59,68')
m3 = m1 + m2;  #  m1 * m2

print(m3)



Functions in python : 

def myfunc(a,b):
    return a + b;
x = myfunc(2,3)    
print(x)



def add_sub(a,b):
    c=  a + b;
    d=  a - b;
    return c , d


x,y = add_sub(2,3)    
print(x,y)





Calling method based on position:
def myfunc(name,age):
    print(name)
    print(age)
    

myfunc('sachin',23)

based on keyword:
def myfunc(name,age):
    print(name)
    print(age)
    

myfunc(age=23,name='sachin')

Default : 
def myfunc(name,age=18):
    print(name)
    print(age)
    

myfunc('sachin')

Varibale args:
def add(a,*b):
    c = a
    for i in b:
        c = c + i
    print(c)
    
add(1,2,3,4,5) 
b is tuple



Keyworded Variable Length Arguments in Python :

def person(name,**data):
    print(name)
    print(data)
    

person('sachin',age='19',dob='21JAN') 
sachin                                                                                                                               
{'age': '19', 'dob': '21JAN'}

Keyworded arguments works with ** only




a = 10
def xyz():
    global a
    a=15
    print("Inside Function ", a)  #15
    
xyz()    
print("Outside Function ", a)    #15






a = 10

def xyz():
    a = 9
    x = globals()['a']            #Without impacting the local variable
    print("Inside Function ", a)  #9
    globals()['a'] = 12
    
    
    
    
xyz()    
print("Outside Function ", a)    #12






Fibonaci Series in Python :
def fibo():
    i = 0
    j = 1 
    for k in range(0,100):
        k = i + j 
        i = j 
        j = k 
        if k < 100:
            print(k," ")
        
fibo()




Factorial :
def fact(n):
    fact=n
    while n > 1:
        fact = fact * (n-1);
        n = n - 1
    print(fact)    




fact(5) 


Using Recursion : 

def fact(n):
    if n==0:
        return 1
    return n * fact(n - 1)

k = fact(5)
print(k)




Annonymous Function : 
f= lambda a,b : a+b

result = f(3,4)
print(result)





from functools import reduce
'''
Filter , Map and Reduce
'''

lst = [2,33,24,32,24,44,56,43,22,56]

filterMe = list(filter(lambda a : a%2 ==0, lst))
print(filterMe)
mapMe = list(map(lambda a : a*2, filterMe))
print(mapMe)
reduceMe = reduce(lambda a,b : a+b,mapMe)
print(reduceMe)




''''
Decorators in python
'''

def div(a,b):
    return a/b



def smart_div(func):
    def inner(a,b):
        if a < b :
            a,b = b, a
            return func(a,b)
    return inner



div = smart_div(div)
k=div(2,4)
print(k)




Classes, Objects and Constructor 

class Abc:
    def __init__(self):
        self.name = 'Sachin'
        self.age = 26
        
    def update(self):
        self.age = 30
        
    def compare(self,other):
        if self.age == other.age:
            return True
        else:
            return False
        
a = Abc()
a.update()
b = Abc()

if a.compare(b):
    print("Both are same")
else:
    print("Both are different")
    
    
    
    
  
  
  Instance Variables Vs Static/Class Variables: 
  class Car:
    wheel = 4
    def __init__(self):
        self.mil = 10
        self.avg = 20
        

obj1 = Car()
obj2 = Car()
        
obj1.avg = 25
Car.wheel = 5

print(obj1.mil, obj1.avg, obj1.wheel)
print(obj2.mil, obj2.avg, obj2.wheel)


class Student:
    
    school = 'abc'
    def __init__(self,m1,m2,m3):
        self.m1= m1
        self.m2= m2
        self.m3= m3
    
    def avg(self):   #Instance Method
        return (self.m1 + self.m2 + self.m3)/3
        
    def get_m1(self):          #Accessors
        return self.m1
        
    def set_m1(self,value):    #Mutators
        self.m1 =  vaue
    
    @classmethod    
    def getSchool(cls):
        return cls.school
    @staticmethod
    def info():
        print("in info method")
    
s1 = Student(12,13,14)
s2 = Student(21,25,33)

print(s1.avg())
print(s2.avg())
print(Student.getSchool())
Student.info()






Ducktyping in python

class PyCharm:
    def execute(self):
        print("Compile")
        print("Run")
class MyEditor:
    def execute(self):
        print("Spell Check")
        print("Compile")
        print("Run")
class Laptop:
    def code(self,ide):
        ide.execute()


ide = MyEditor()
ide.execute()

If there is a duck that can quack,swim then it's a duck
If there is obj that has the method execute(no matters which class it's belongs to ) , it should execute




Operator Oveloading: 

class Student:
    def __init__(self,m1,m2):
        self.m1=m1
        self.m2=m2

    def __add__(self,other):
        m1tot = self.m1  + other.m1
        m2tot = self.m2  + other.m2
        c = Student(m1tot,m2tot)
        return c
    def __gt__(self, other):
        atot= self.m1 + self.m2
        btot= other.m1 + other.m2
        if atot > btot:
            return True
        else:
            return False

a = Student(83,20)
b = Student(0,0)

c = a + b
print(c.m1,c.m2)


if a > b:
    print("a wins")
else:
    print("b wins")





class Student:
    def __init__(self,m1,m2):
        self.m1=m1
        self.m2=m2

    def __add__(self,other):
        m1tot = self.m1  + other.m1
        m2tot = self.m2  + other.m2
        c = Student(m1tot,m2tot)
        return c
    def __gt__(self, other):
        atot= self.m1 + self.m2
        btot= other.m1 + other.m2
        if atot > btot:
            return True
        else:
            return False

    def __str__(self):
        return self.m1, self.m2

a = Student(83,20)
b = Student(0,0)

c = a + b
print(c.__str__())




from abc import ABC, abstractmethod

class Computer(ABC):
    @abstractmethod
    def process(self):
        pass
com = Computer()
com.process()





If you fail to implement abstarct method, you will get the error

from abc import ABC, abstractmethod

class Computer(ABC):
    @abstractmethod
    def process(self):
        pass

class Laptop(Computer):
    def process(self):
        print("It's running")



com = Laptop()
com.process()




from abc import ABC, abstractmethod

class Computer(ABC):
    @abstractmethod
    def process(self):
        pass

class Laptop(Computer):
    def process(self):
        print("It's running")


class Programmer:
    def work(self,com1):
        print("Solving Bugs")
        com1.process()

class Whiteboard:
    def write(self):
        print("Its writing")

com = Laptop()
com2 = Whiteboard()
prog = Programmer()
prog.work(com2)


lst = [1,2,3,4,5,6,7]

it = iter(lst)
print(it.__next__())
print(it.__next__())
print(it.__next__())
print(next(it))
