Creating 3D array from 2D array :

from numpy import *
arr=array([
        [1,2,3,5,6,7],
        [4,5,6,3,2,3]
          ])
arr2 = arr.flatten()
arr3 = arr.reshape(3,4)

print(arr2)       
print(arr3)  

'''
   ndim  : Num of Dim    flatten()   :Into 1D array
   shape : 3,4           reshape(3,4) : into 2D array
   size  : Total Elements
'''

Matrix
from numpy import *

arr=array([
        [1,2,3,5,6,7],
        [4,5,6,3,2,3]
          ])

m  = matrix(arr)
print(m)


Addition/ Multiplication of 2 matrix:
from numpy import *

arr=array([
        [1,2,3,5,6,7],
        [4,5,6,3,2,3]
          ])

m1 = matrix('1,2,3;3,4,5;4,5,6')
m2 = matrix('10,2,30;30,40,50;40,59,68')
m3 = m1 + m2;  #  m1 * m2

print(m3)



Functions in python : 

def myfunc(a,b):
    return a + b;
x = myfunc(2,3)    
print(x)



def add_sub(a,b):
    c=  a + b;
    d=  a - b;
    return c , d


x,y = add_sub(2,3)    
print(x,y)





Calling method based on position:
def myfunc(name,age):
    print(name)
    print(age)
    

myfunc('sachin',23)

based on keyword:
def myfunc(name,age):
    print(name)
    print(age)
    

myfunc(age=23,name='sachin')

Default : 
def myfunc(name,age=18):
    print(name)
    print(age)
    

myfunc('sachin')

Varibale args:
def add(a,*b):
    c = a
    for i in b:
        c = c + i
    print(c)
    
add(1,2,3,4,5) 
b is tuple



Keyworded Variable Length Arguments in Python :

def person(name,**data):
    print(name)
    print(data)
    

person('sachin',age='19',dob='21JAN') 
sachin                                                                                                                               
{'age': '19', 'dob': '21JAN'}

Keyworded arguments works with ** only




a = 10
def xyz():
    global a
    a=15
    print("Inside Function ", a)  #15
    
xyz()    
print("Outside Function ", a)    #15






a = 10

def xyz():
    a = 9
    x = globals()['a']            #Without impacting the local variable
    print("Inside Function ", a)  #9
    globals()['a'] = 12
    
    
    
    
xyz()    
print("Outside Function ", a)    #12






Fibonaci Series in Python :
def fibo():
    i = 0
    j = 1 
    for k in range(0,100):
        k = i + j 
        i = j 
        j = k 
        if k < 100:
            print(k," ")
        
fibo()




Factorial :
def fact(n):
    fact=n
    while n > 1:
        fact = fact * (n-1);
        n = n - 1
    print(fact)    




fact(5) 


Using Recursion : 

def fact(n):
    if n==0:
        return 1
    return n * fact(n - 1)

k = fact(5)
print(k)
