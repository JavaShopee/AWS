# Ordered Collection of Items
# You can store anything inside list like int, float, char

listme = [1,2,3,4,5,'sachin',8.9, None]

listme[1:] = ['two','three','four','five']

print(listme)

O: [1, 'two', 'three', 'four', 'five']



# insert at position
# append : list within list
# extend : element extend
list1 = [1,2,3,4,5]
list2 = [6,7,8,9,10]

list3 = list1 + list2

list1.insert(1,'sachin')
print(list1)
print(list3)


list = [1,2,3,4,5,6,7,8,9,10]
list.pop(5)
print(list)






split method : string to list converstion
join : list to string
mystring = 'sachin arora grade a'
listme = mystring.split(" ")


name, age = input("Enter name and age separated by comma : ").split(",")
print(name)
print(age)

print(listme)


list = [1,2,3,4,5,6,7,8,9,10]
del list[9]
print(list)

list = [1,2,3,4,5,6,7,8,9,10]
list.remove(6)
print(list)
ValueError : If element not in list

#Other list methods: Sorted(just to print in sorted) , sort , count , clear, copy 
listme = ['apple','mango','banana','orange','grapes']
print(sorted(listme))


lisme = ['sachin','24']
print(",".join(lisme))



#List Vs Arrays:
#List : flexible, hetrogeneous elelents
#Array Modiule : Numpy 
#Arrays : Homo 
#
#List Vs String:
#List are mutable
#String are immutable
#strin.title()


POP method returns a popped value :
listme = list(range(0,11))
popped_item = listme.pop()
print(popped_item)



Index functon with list 
listme = [1,2,3,4,5,6,7,8,9,10]
listme.index(1,2,7)


tuples () : Immutable
tuples are faster than lists
Performcnce benefits

Methods : count(), index(),len, slicing


Tuple Unpacking:
mytuple = ('abc', 'def', 'ghi')
mytuple1,mytuple2,mytuple4 = (mytuple)
print(mytuple1)
print(mytuple2)
print(mytuple4)

Tuple Without paanthesis : 
mytuple = 'abc', 'def', 'ghi'

Unpacking: 
user_info = {
    "Name": "Sachin",
    "Age": 34,
    "Fav_movies": ['Dhoom','Sholey','Sally'],
    "Fav_Tunes":["abc_tune","def_tune"]
}

for i in user_info.items():
    print(i)

O :
('Name', 'Sachin')
('Age', 34)
('Fav_movies', ['Dhoom', 'Sholey', 'Sally'])
('Fav_Tunes', ['abc_tune', 'def_tune'])



for i,j in user_info.items():
    print(f"{i}-->{j}")

O: 
Name-->Sachin
Age-->34
Fav_movies-->['Dhoom', 'Sholey', 'Sally']
Fav_Tunes-->['abc_tune', 'def_tune']   





user_info = {
    "Name": "Sachin",
    "Age": 34,
    "Fav_movies": ['Dhoom','Sholey','Sally'],
    "Fav_Tunes":["abc_tune","def_tune"]
}

poppd_item= user_info.pop('Fav_Tunes')

print(f"popped item is {poppd_item}")
print(user_info)



popitem method : randomly any key value pair
user_info = {
    "Name": "Sachin",
    "Age": 34,
    "Fav_movies": ['Dhoom','Sholey','Sally'],
    "Fav_Tunes":["abc_tune","def_tune"]
}

poppd_item = user_info.popitem()


print(f"popped item is {poppd_item}")
print(user_info)


Get Method :
to handle key error 

user_info = {
    "Name": "Sachin",
    "Age": 34,
    "Fav_movies": ['Dhoom','Sholey','Sally'],
    "Fav_Tunes" : ["abc_tune","def_tune"]
}

newval= user_info.get('Name')
print(newval)

user_info['Names'] : will give you keyerror for not existing keys, get will give you none


user_info = {
    "Name"       : "Sachin",
    "Age"        : 34,
    "Fav_movies" : ['Dhoom','Sholey','Sally'],
    "Fav_Tunes"  : ["abc_tune","def_tune"]
}

print(user_info.get('Names','Not Found'))



Dictionary : 
Unordered collection of key value pair
Set: 
Unordered collection of unique items


Set is widely used to remove duplicate elements from the list :
mylist = [8,7,3,4,5,6,7,1,2,3,9,10]

myset = list(set(mylist))
print(myset)


set.add()
.remove() > Will give you key error for non existing element, use discard() to avoid the error
.clear() 
.copy()


Set can't store dict, list 
similar to hashset for ordered coll



s1 = {1,2,3,4,5}
s2 = {4,5,6,7,8}

##Union 
s3 = s1 | s2
print(s3)

##Intersaction
s4 = s1 & s2
print(s4)



List Comprehension  wiht if statement :

neweven = [i for i in numbers if i%2==0]
print(neweven)

List Comprehension with if else statement :
mylist = [1,2,3,4,5,6,7,8,9,10]

newlist = [i**2 if i %2==0 else -i for i in mylist]




Dictionary Comprehension : 
name = 'sachinsasa'
newdict = {char:name.count(char) for char in name}
print(newdict)



Convert all parameter passed into TUPLE first
def all_nums(*args):
    total = 0
    print(type(args))    >> tuple
    for i in args:
        total += i
    return total


print(all_nums(1,2,3,4,5,6,7,8,9,10))




Unpack List Elements: 

mylist = [1,2,3,4,5,6,7]
*mylist >> Unpack list elements
Similarly we can unpack tuple





def myfunc(num,*args):
    if args:
        return [i**num for i in args]
    else:
        return "not present"


print(myfunc(2,*[1,2,3]))



kwargs gather the keyworded args as dictionary whereas args gather the argument as tuple
def myfunc(**kwargs):
    print(type(kwargs))  > <class 'dict'>
    
    
    
Dictionary unpacking with kwargs:

def myfunc(**kwargs):
    for k,v in kwargs.items():
        print(f"{k}->{v}")


d = {"FName":"Sachin","LName":"Aroraa"}
myfunc(**d)




Order : PADK : parameters >> args >> default parameter >> kwargs
def new_func(name, *args , lname = 'unknown', **kwargs):
    print(name)
    print(args)
    print(lname)
    print(kwargs)


new_func('sachin' , 1, 2, 3, a =1, b=2)
    
    
    
    
good example with kwargs :

def sample_func(l,**kwargs):
    if kwargs.get('reverse_string') == True:
        return [i[::-1].title() for i in l]
    else:
        return [i.title() for i in l]





print(sample_func(['sachin','ramesh'],reverse_string=True))


is_even = lambda a : a%2==0

last_char = lambda s : len(s)>5



map Funtion:
def sqrme(a):
    return a**2

mylist = [1,2,3,4,5,6,7,8]
print(list(map(sqrme,mylist)))

mylist = [1,2,3,4,5,6,7,8]
print(list(map(lambda a:a**2 ,mylist)))

outlist = [a**2 for a in mylist]
print(outlist)

with inbuilt functions, use map filter
otherwise use iterable


map, filter objects is iterable ONLY ONCE


List , Tuples , Strings are iterables
map, filter objs are iterator

for i in numbers:
    print(i) >>>
    1. Call Iter Function, Iter function will convert iterable to iterator
    iter(numbers) >> iterator
    2. next(item(numbers)) ; next function will be callled on iterator
